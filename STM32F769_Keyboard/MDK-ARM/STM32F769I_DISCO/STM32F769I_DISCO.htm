<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F769I_DISCO\STM32F769I_DISCO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F769I_DISCO\STM32F769I_DISCO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Aug 07 10:54:15 2022
<BR><P>
<H3>Maximum Stack Usage =       2188 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; HAL_JPEG_Init &rArr; JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">ADC_IRQHandler</a><BR>
 <LI><a href="#[17]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">BusFault_Handler</a><BR>
 <LI><a href="#[15]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">HardFault_Handler</a><BR>
 <LI><a href="#[16]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">MemManage_Handler</a><BR>
 <LI><a href="#[c4]">StartDefaultTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">StartDefaultTask</a><BR>
 <LI><a href="#[18]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">UsageFault_Handler</a><BR>
 <LI><a href="#[3b4]">touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b4]">touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</a><BR>
 <LI><a href="#[3de]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3de]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a><BR>
 <LI><a href="#[3a5]">touchgfx::TextProvider::getNextCharInternal()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a5]">touchgfx::TextProvider::getNextCharInternal()</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[17]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[31]">CAN1_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[32]">CAN1_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[33]">CAN1_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[30]">CAN1_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5d]">CAN2_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5e]">CAN2_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5f]">CAN2_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5c]">CAN2_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[85]">CAN3_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[86]">CAN3_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[87]">CAN3_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[84]">CAN3_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7a]">CEC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6b]">DCMI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7f]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[80]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[81]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[82]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[76]">DMA2D_IRQHandler</a> from stm32f7xx_it.o(i.DMA2D_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream0_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream1_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7e]">DSI_IRQHandler</a> from stm32f7xx_it.o(i.DSI_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[1a]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5a]">ETH_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[5b]">ETH_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[23]">EXTI0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[45]">EXTI15_10_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[24]">EXTI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[25]">EXTI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[26]">EXTI3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[27]">EXTI4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[34]">EXTI9_5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[21]">FLASH_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4d]">FMC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6d]">FPU_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[15]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3d]">I2C1_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3c]">I2C1_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3f]">I2C2_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3e]">I2C2_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[66]">I2C3_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[65]">I2C3_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7c]">I2C4_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7b]">I2C4_EV_IRQHandler</a> from stm32f7xx_it.o(i.I2C4_EV_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c9]">IdleTaskHook</a> from touchgfxhal.o(i.IdleTaskHook) referenced from freertos.o(i.vApplicationIdleHook)
 <LI><a href="#[8d]">JPEG_DMAErrorCallback</a> from stm32f7xx_hal_jpeg.o(i.JPEG_DMAErrorCallback) referenced from stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[8e]">JPEG_DMAInCpltCallback</a> from stm32f7xx_hal_jpeg.o(i.JPEG_DMAInCpltCallback) referenced from stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[90]">JPEG_DMAOutAbortCallback</a> from stm32f7xx_hal_jpeg.o(i.JPEG_DMAOutAbortCallback) referenced from stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[8f]">JPEG_DMAOutCpltCallback</a> from stm32f7xx_hal_jpeg.o(i.JPEG_DMAOutCpltCallback) referenced from stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
 <LI><a href="#[88]">JPEG_IRQHandler</a> from stm32f7xx_it.o(i.JPEG_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[94]">JPEG_MCU_Gray_ARGB_ConvertBlocks</a> from jpeg_utils.o(i.JPEG_MCU_Gray_ARGB_ConvertBlocks) referenced from jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[99]">JPEG_MCU_Gray_ARGB_ConvertBlocks</a> from tgfx_jpeg_utils.o(i.JPEG_MCU_Gray_ARGB_ConvertBlocks) referenced from tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[95]">JPEG_MCU_YCCK_ARGB_ConvertBlocks</a> from jpeg_utils.o(i.JPEG_MCU_YCCK_ARGB_ConvertBlocks) referenced from jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[9a]">JPEG_MCU_YCCK_ARGB_ConvertBlocks</a> from tgfx_jpeg_utils.o(i.JPEG_MCU_YCCK_ARGB_ConvertBlocks) referenced from tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[92]">JPEG_MCU_YCbCr420_ARGB_ConvertBlocks</a> from jpeg_utils.o(i.JPEG_MCU_YCbCr420_ARGB_ConvertBlocks) referenced from jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[93]">JPEG_MCU_YCbCr422_ARGB_ConvertBlocks</a> from jpeg_utils.o(i.JPEG_MCU_YCbCr422_ARGB_ConvertBlocks) referenced from jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[98]">JPEG_MCU_YCbCr422_ARGB_ConvertBlocks</a> from tgfx_jpeg_utils.o(i.JPEG_MCU_YCbCr422_ARGB_ConvertBlocks) referenced from tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[91]">JPEG_MCU_YCbCr444_ARGB_ConvertBlocks</a> from jpeg_utils.o(i.JPEG_MCU_YCbCr444_ARGB_ConvertBlocks) referenced from jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[96]">JPEG_MCU_YCbCr444_ARGB_ConvertBlocks</a> from tgfx_jpeg_utils.o(i.JPEG_MCU_YCbCr444_ARGB_ConvertBlocks) referenced from tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[79]">LPTIM1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[75]">LTDC_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[74]">LTDC_IRQHandler</a> from stm32f7xx_it.o(i.LTDC_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[89]">MDIOS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[16]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[14]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[60]">OTG_FS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[47]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[69]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[1e]">PVD_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[1b]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[78]">QUADSPI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[22]">RCC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6c]">RNG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[46]">RTC_Alarm_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[20]">RTC_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[13]">Reset_Handler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[73]">SAI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[77]">SAI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4e]">SDMMC1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[83]">SDMMC2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[7d]">SPDIF_RX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[50]">SPI3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[70]">SPI4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[71]">SPI5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[72]">SPI6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[19]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c4]">StartDefaultTask</a> from main.o(i.StartDefaultTask) referenced from main.o(i.main)
 <LI><a href="#[1c]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[8b]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f769xx.o(.text)
 <LI><a href="#[1f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[97]">TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks</a> from tgfx_jpeg_utils.o(i.TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks) referenced from tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
 <LI><a href="#[35]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[38]">TIM1_CC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[37]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[36]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[39]">TIM2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3a]">TIM3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[3b]">TIM4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4f]">TIM5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[53]">TIM6_DAC_IRQHandler</a> from stm32f7xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[54]">TIM7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[48]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4b]">TIM8_CC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[49]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c5]">TouchGFX_Task</a> from app_touchgfx.o(i.TouchGFX_Task) referenced from main.o(i.main)
 <LI><a href="#[51]">UART4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[52]">UART5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6e]">UART7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[6f]">UART8_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[42]">USART1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[44]">USART3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[64]">USART6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[18]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[1d]">WWDG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[9c]">DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</a> from stm32dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef) referenced from stm32dma.o(i._ZN8STM32DMA10initializeEv)
 <LI><a href="#[d6]">Screen1View::setupScreen()</a> from screen1view.o(i._ZN11Screen1View11setupScreenEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[d8]">Screen1View::tearDownScreen()</a> from screen1view.o(i._ZN11Screen1View14tearDownScreenEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[cd]">Screen1View::textArea1ClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)</a> from screen1view.o(i._ZN11Screen1View21textArea1ClickHandlerERKN8touchgfx23TextAreaWithOneWildcardERKNS0_10ClickEventE) referenced from screen1view.o(.constdata)
 <LI><a href="#[ce]">Screen1View::KeyboardEscBtClickHandler(Keyboard&)</a> from screen1view.o(i._ZN11Screen1View25KeyboardEscBtClickHandlerER8Keyboard) referenced from screen1view.o(.constdata)
 <LI><a href="#[d1]">Screen1View::KeyboardCnEnterBtClickHandler(Keyboard&)</a> from screen1view.o(i._ZN11Screen1View29KeyboardCnEnterBtClickHandlerER8Keyboard) referenced from screen1view.o(.constdata)
 <LI><a href="#[cf]">Screen1View::KeyboardEnEnterBtClickHandler(Keyboard&)</a> from screen1view.o(i._ZN11Screen1View29KeyboardEnEnterBtClickHandlerER8Keyboard) referenced from screen1view.o(.constdata)
 <LI><a href="#[d0]">Screen1View::KeyboardNbEnterBtClickHandler(Keyboard&)</a> from screen1view.o(i._ZN11Screen1View29KeyboardNbEnterBtClickHandlerER8Keyboard) referenced from screen1view.o(.constdata)
 <LI><a href="#[d4]">Screen1View::~Screen1View()</a> from screen1view.o(i._ZN11Screen1ViewD1Ev) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[fb]">TouchGFXHAL::beginFrame()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL10beginFrameEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[df]">TouchGFXHAL::initialize()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL10initializeEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f3]">TouchGFXHAL::enableInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL16enableInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e1]">TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)</a> from touchgfxhal.o(i._ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f4]">TouchGFXHAL::disableInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL17disableInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[fd]">TouchGFXHAL::setTFTFrameBuffer(unsigned short*)</a> from touchgfxhal.o(i._ZN11TouchGFXHAL17setTFTFrameBufferEPt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f2]">TouchGFXHAL::configureInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL19configureInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f5]">TouchGFXHAL::enableLCDControllerInterrupt()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL28enableLCDControllerInterruptEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f6]">TouchGFXHAL::setFrameBufferStartAddresses(void*, void*, void*)</a> from touchgfxhal.o(i._ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[fc]">TouchGFXHAL::endFrame()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL8endFrameEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e0]">TouchGFXHAL::taskEntry()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL9taskEntryEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c3]">TouchGFXHAL::~TouchGFXHAL()</a> from touchgfxhal.o(i._ZN11TouchGFXHALD1Ev) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c3]">TouchGFXHAL::~TouchGFXHAL()</a> from touchgfxhal.o(i._ZN11TouchGFXHALD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[c8]">FrontendHeap::~FrontendHeap()</a> from touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from touchgfxconfiguration.o(.constdata__ZTV12FrontendHeap)
 <LI><a href="#[c8]">FrontendHeap::~FrontendHeap()</a> from touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from touchgfxconfiguration.o(i.touchgfx_init)
 <LI><a href="#[119]">KeyboardBase::clrBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10clrBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[118]">KeyboardBase::escBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10escBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[144]">KeyboardBase::fh1BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10fh1BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[145]">KeyboardBase::fh2BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10fh2BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[146]">KeyboardBase::fh3BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10fh3BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[147]">KeyboardBase::fh4BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10fh4BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[148]">KeyboardBase::fh5BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10fh5BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[149]">KeyboardBase::fh6BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10fh6BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[14a]">KeyboardBase::fh7BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10fh7BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[14b]">KeyboardBase::fh8BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10fh8BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[14c]">KeyboardBase::fh9BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10fh9BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[117]">KeyboardBase::initialize()</a> from keyboardbase.o(i._ZN12KeyboardBase10initializeEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[143]">KeyboardBase::nb0BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10nb0BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[13a]">KeyboardBase::nb1BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10nb1BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[13b]">KeyboardBase::nb2BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10nb2BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[13c]">KeyboardBase::nb3BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10nb3BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[13d]">KeyboardBase::nb4BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10nb4BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[13e]">KeyboardBase::nb5BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10nb5BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[13f]">KeyboardBase::nb6BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10nb6BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[140]">KeyboardBase::nb7BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10nb7BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[141]">KeyboardBase::nb8BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10nb8BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[142]">KeyboardBase::nb9BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10nb9BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[11b]">KeyboardBase::numBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase10numBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[14d]">KeyboardBase::fh10BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase11fh10BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[14e]">KeyboardBase::fh11BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase11fh11BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[14f]">KeyboardBase::fh12BtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase11fh12BtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[155]">KeyboardBase::cnBtABCClick()</a> from keyboardbase.o(i._ZN12KeyboardBase12cnBtABCClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[156]">KeyboardBase::cnBtDEFClick()</a> from keyboardbase.o(i._ZN12KeyboardBase12cnBtDEFClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[169]">KeyboardBase::cnBtDelClick()</a> from keyboardbase.o(i._ZN12KeyboardBase12cnBtDelClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[168]">KeyboardBase::cnBtEntClick()</a> from keyboardbase.o(i._ZN12KeyboardBase12cnBtEntClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[157]">KeyboardBase::cnBtGHIClick()</a> from keyboardbase.o(i._ZN12KeyboardBase12cnBtGHIClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[158]">KeyboardBase::cnBtJKLClick()</a> from keyboardbase.o(i._ZN12KeyboardBase12cnBtJKLClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[159]">KeyboardBase::cnBtMNOClick()</a> from keyboardbase.o(i._ZN12KeyboardBase12cnBtMNOClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[15b]">KeyboardBase::cnBtTUVClick()</a> from keyboardbase.o(i._ZN12KeyboardBase12cnBtTUVClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[11a]">KeyboardBase::cn_enBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase12cn_enBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[150]">KeyboardBase::fhDelBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase12fhDelBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[151]">KeyboardBase::fhEntBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase12fhEntBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[167]">KeyboardBase::cnBtBackClick()</a> from keyboardbase.o(i._ZN12KeyboardBase13cnBtBackClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[152]">KeyboardBase::cnBtLiftClick()</a> from keyboardbase.o(i._ZN12KeyboardBase13cnBtLiftClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[154]">KeyboardBase::cnBtNoneClick()</a> from keyboardbase.o(i._ZN12KeyboardBase13cnBtNoneClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[15a]">KeyboardBase::cnBtPQRSClick()</a> from keyboardbase.o(i._ZN12KeyboardBase13cnBtPQRSClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[15c]">KeyboardBase::cnBtWXYZClick()</a> from keyboardbase.o(i._ZN12KeyboardBase13cnBtWXYZClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[139]">KeyboardBase::en_delBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase13en_delBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[138]">KeyboardBase::en_entBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase13en_entBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[153]">KeyboardBase::cnBtRightClick()</a> from keyboardbase.o(i._ZN12KeyboardBase14cnBtRightClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[162]">KeyboardBase::cnSelectBt1Click()</a> from keyboardbase.o(i._ZN12KeyboardBase16cnSelectBt1ClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[163]">KeyboardBase::cnSelectBt2Click()</a> from keyboardbase.o(i._ZN12KeyboardBase16cnSelectBt2ClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[164]">KeyboardBase::cnSelectBt3Click()</a> from keyboardbase.o(i._ZN12KeyboardBase16cnSelectBt3ClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[165]">KeyboardBase::cnSelectBt4Click()</a> from keyboardbase.o(i._ZN12KeyboardBase16cnSelectBt4ClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[166]">KeyboardBase::cnSelectBt5Click()</a> from keyboardbase.o(i._ZN12KeyboardBase16cnSelectBt5ClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[15d]">KeyboardBase::pySelectBt1Click()</a> from keyboardbase.o(i._ZN12KeyboardBase16pySelectBt1ClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[15e]">KeyboardBase::pySelectBt2Click()</a> from keyboardbase.o(i._ZN12KeyboardBase16pySelectBt2ClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[15f]">KeyboardBase::pySelectBt3Click()</a> from keyboardbase.o(i._ZN12KeyboardBase16pySelectBt3ClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[160]">KeyboardBase::pySelectBt4Click()</a> from keyboardbase.o(i._ZN12KeyboardBase16pySelectBt4ClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[161]">KeyboardBase::pySelectBt5Click()</a> from keyboardbase.o(i._ZN12KeyboardBase16pySelectBt5ClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[d3]">KeyboardBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</a> from keyboardbase.o(i._ZN12KeyboardBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE) referenced from keyboardbase.o(.constdata)
 <LI><a href="#[124]">KeyboardBase::aBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8aBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[130]">KeyboardBase::bBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8bBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[12e]">KeyboardBase::cBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8cBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[126]">KeyboardBase::dBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8dBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[11e]">KeyboardBase::eBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8eBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[127]">KeyboardBase::fBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8fBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[128]">KeyboardBase::gBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8gBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[129]">KeyboardBase::hBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8hBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[123]">KeyboardBase::iBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8iBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[12a]">KeyboardBase::jBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8jBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[12b]">KeyboardBase::kBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8kBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[136]">KeyboardBase::lBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8lBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[132]">KeyboardBase::mBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8mBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[131]">KeyboardBase::nBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8nBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[133]">KeyboardBase::oBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8oBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[135]">KeyboardBase::pBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8pBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[11c]">KeyboardBase::qBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8qBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[11f]">KeyboardBase::rBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8rBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[125]">KeyboardBase::sBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8sBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[120]">KeyboardBase::tBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8tBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[122]">KeyboardBase::uBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8uBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[12f]">KeyboardBase::vBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8vBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[11d]">KeyboardBase::wBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8wBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[12d]">KeyboardBase::xBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8xBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[121]">KeyboardBase::yBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8yBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[12c]">KeyboardBase::zBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase8zBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[137]">KeyboardBase::blBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase9blBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[134]">KeyboardBase::dxBtClick()</a> from keyboardbase.o(i._ZN12KeyboardBase9dxBtClickEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[103]">KeyboardBase::~KeyboardBase()</a> from keyboard.o(i._ZN12KeyboardBaseD1Ev) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[16b]">Screen1ViewBase::setupScreen()</a> from screen1viewbase.o(i._ZN15Screen1ViewBase11setupScreenEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[16a]">Screen1ViewBase::~Screen1ViewBase()</a> from screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[16e]">Screen1Presenter::deactivate()</a> from screen1presenter.o(i._ZN16Screen1Presenter10deactivateEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[16d]">Screen1Presenter::activate()</a> from screen1presenter.o(i._ZN16Screen1Presenter8activateEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[16f]">Screen1Presenter::~Screen1Presenter()</a> from screen1presenter.o(i._ZN16Screen1PresenterD1Ev) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[174]">FrontendApplication::handleTickEvent()</a> from frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[179]">HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)</a> from hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttj) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[17c]">HardwareMJPEGDecoder::getNumberOfFrames()</a> from hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder17getNumberOfFramesEv) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[17a]">HardwareMJPEGDecoder::gotoFrame(unsigned)</a> from hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder9gotoFrameEj) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[bc]">HardwareMJPEGDecoder::~HardwareMJPEGDecoder()</a> from touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[bc]">HardwareMJPEGDecoder::~HardwareMJPEGDecoder()</a> from touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev) referenced from touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
 <LI><a href="#[17e]">STM32TouchController::sampleTouch(int&, int&)</a> from stm32touchcontroller.o(i._ZN20STM32TouchController11sampleTouchERiS0_) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[17d]">STM32TouchController::init()</a> from stm32touchcontroller.o(i._ZN20STM32TouchController4initEv) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[bf]">STM32TouchController::~STM32TouchController()</a> from stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[bf]">STM32TouchController::~STM32TouchController()</a> from stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[102]">TouchGFXGeneratedHAL::FlushCache()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10FlushCacheEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[101]">TouchGFXGeneratedHAL::InvalidateCache()</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL15InvalidateCacheEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e7]">TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned)</a> from touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvj) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c2]">ApplicationFontProvider::~ApplicationFontProvider()</a> from touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev) referenced from applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
 <LI><a href="#[c2]">ApplicationFontProvider::~ApplicationFontProvider()</a> from touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[d2]">FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[180]">FrontendApplicationBase::~FrontendApplicationBase()</a> from touchgfxconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[bd]">DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::Stream::Stream()</a> from touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj480ELj288ELj960ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev) referenced from touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
 <LI><a href="#[be]">DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::~DedicatedBufferController()</a> from touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj480ELj288ELj960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev) referenced from touchgfxgeneratedhal.o(.constdata__ZTV25DedicatedBufferControllerILj1ELj480ELj288ELj960ELN8touchgfx6Bitmap12BitmapFormatE0EE)
 <LI><a href="#[be]">DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::~DedicatedBufferController()</a> from touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj480ELj288ELj960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev) referenced from touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
 <LI><a href="#[183]">Keyboard::clrBtClick()</a> from keyboard.o(i._ZN8Keyboard10clrBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[182]">Keyboard::escBtClick()</a> from keyboard.o(i._ZN8Keyboard10escBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1ae]">Keyboard::fh1BtClick()</a> from keyboard.o(i._ZN8Keyboard10fh1BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1af]">Keyboard::fh2BtClick()</a> from keyboard.o(i._ZN8Keyboard10fh2BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1b0]">Keyboard::fh3BtClick()</a> from keyboard.o(i._ZN8Keyboard10fh3BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1b1]">Keyboard::fh4BtClick()</a> from keyboard.o(i._ZN8Keyboard10fh4BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1b2]">Keyboard::fh5BtClick()</a> from keyboard.o(i._ZN8Keyboard10fh5BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1b3]">Keyboard::fh6BtClick()</a> from keyboard.o(i._ZN8Keyboard10fh6BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1b4]">Keyboard::fh7BtClick()</a> from keyboard.o(i._ZN8Keyboard10fh7BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1b5]">Keyboard::fh8BtClick()</a> from keyboard.o(i._ZN8Keyboard10fh8BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1b6]">Keyboard::fh9BtClick()</a> from keyboard.o(i._ZN8Keyboard10fh9BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[181]">Keyboard::initialize()</a> from keyboard.o(i._ZN8Keyboard10initializeEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1ad]">Keyboard::nb0BtClick()</a> from keyboard.o(i._ZN8Keyboard10nb0BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1a4]">Keyboard::nb1BtClick()</a> from keyboard.o(i._ZN8Keyboard10nb1BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1a5]">Keyboard::nb2BtClick()</a> from keyboard.o(i._ZN8Keyboard10nb2BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1a6]">Keyboard::nb3BtClick()</a> from keyboard.o(i._ZN8Keyboard10nb3BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1a7]">Keyboard::nb4BtClick()</a> from keyboard.o(i._ZN8Keyboard10nb4BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1a8]">Keyboard::nb5BtClick()</a> from keyboard.o(i._ZN8Keyboard10nb5BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1a9]">Keyboard::nb6BtClick()</a> from keyboard.o(i._ZN8Keyboard10nb6BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1aa]">Keyboard::nb7BtClick()</a> from keyboard.o(i._ZN8Keyboard10nb7BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1ab]">Keyboard::nb8BtClick()</a> from keyboard.o(i._ZN8Keyboard10nb8BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1ac]">Keyboard::nb9BtClick()</a> from keyboard.o(i._ZN8Keyboard10nb9BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[185]">Keyboard::numBtClick()</a> from keyboard.o(i._ZN8Keyboard10numBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1b7]">Keyboard::fh10BtClick()</a> from keyboard.o(i._ZN8Keyboard11fh10BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1b8]">Keyboard::fh11BtClick()</a> from keyboard.o(i._ZN8Keyboard11fh11BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1b9]">Keyboard::fh12BtClick()</a> from keyboard.o(i._ZN8Keyboard11fh12BtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1bf]">Keyboard::cnBtABCClick()</a> from keyboard.o(i._ZN8Keyboard12cnBtABCClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1c0]">Keyboard::cnBtDEFClick()</a> from keyboard.o(i._ZN8Keyboard12cnBtDEFClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1d3]">Keyboard::cnBtDelClick()</a> from keyboard.o(i._ZN8Keyboard12cnBtDelClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1d2]">Keyboard::cnBtEntClick()</a> from keyboard.o(i._ZN8Keyboard12cnBtEntClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1c1]">Keyboard::cnBtGHIClick()</a> from keyboard.o(i._ZN8Keyboard12cnBtGHIClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1c2]">Keyboard::cnBtJKLClick()</a> from keyboard.o(i._ZN8Keyboard12cnBtJKLClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1c3]">Keyboard::cnBtMNOClick()</a> from keyboard.o(i._ZN8Keyboard12cnBtMNOClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1c5]">Keyboard::cnBtTUVClick()</a> from keyboard.o(i._ZN8Keyboard12cnBtTUVClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[184]">Keyboard::cn_enBtClick()</a> from keyboard.o(i._ZN8Keyboard12cn_enBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1ba]">Keyboard::fhDelBtClick()</a> from keyboard.o(i._ZN8Keyboard12fhDelBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1bb]">Keyboard::fhEntBtClick()</a> from keyboard.o(i._ZN8Keyboard12fhEntBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1d1]">Keyboard::cnBtBackClick()</a> from keyboard.o(i._ZN8Keyboard13cnBtBackClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1bc]">Keyboard::cnBtLiftClick()</a> from keyboard.o(i._ZN8Keyboard13cnBtLiftClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1be]">Keyboard::cnBtNoneClick()</a> from keyboard.o(i._ZN8Keyboard13cnBtNoneClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1c4]">Keyboard::cnBtPQRSClick()</a> from keyboard.o(i._ZN8Keyboard13cnBtPQRSClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1c6]">Keyboard::cnBtWXYZClick()</a> from keyboard.o(i._ZN8Keyboard13cnBtWXYZClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1a3]">Keyboard::en_delBtClick()</a> from keyboard.o(i._ZN8Keyboard13en_delBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1a2]">Keyboard::en_entBtClick()</a> from keyboard.o(i._ZN8Keyboard13en_entBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1bd]">Keyboard::cnBtRightClick()</a> from keyboard.o(i._ZN8Keyboard14cnBtRightClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1cc]">Keyboard::cnSelectBt1Click()</a> from keyboard.o(i._ZN8Keyboard16cnSelectBt1ClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1cd]">Keyboard::cnSelectBt2Click()</a> from keyboard.o(i._ZN8Keyboard16cnSelectBt2ClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1ce]">Keyboard::cnSelectBt3Click()</a> from keyboard.o(i._ZN8Keyboard16cnSelectBt3ClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1cf]">Keyboard::cnSelectBt4Click()</a> from keyboard.o(i._ZN8Keyboard16cnSelectBt4ClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1d0]">Keyboard::cnSelectBt5Click()</a> from keyboard.o(i._ZN8Keyboard16cnSelectBt5ClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1c7]">Keyboard::pySelectBt1Click()</a> from keyboard.o(i._ZN8Keyboard16pySelectBt1ClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1c8]">Keyboard::pySelectBt2Click()</a> from keyboard.o(i._ZN8Keyboard16pySelectBt2ClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1c9]">Keyboard::pySelectBt3Click()</a> from keyboard.o(i._ZN8Keyboard16pySelectBt3ClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1ca]">Keyboard::pySelectBt4Click()</a> from keyboard.o(i._ZN8Keyboard16pySelectBt4ClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1cb]">Keyboard::pySelectBt5Click()</a> from keyboard.o(i._ZN8Keyboard16pySelectBt5ClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[18e]">Keyboard::aBtClick()</a> from keyboard.o(i._ZN8Keyboard8aBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[19a]">Keyboard::bBtClick()</a> from keyboard.o(i._ZN8Keyboard8bBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[198]">Keyboard::cBtClick()</a> from keyboard.o(i._ZN8Keyboard8cBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[190]">Keyboard::dBtClick()</a> from keyboard.o(i._ZN8Keyboard8dBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[188]">Keyboard::eBtClick()</a> from keyboard.o(i._ZN8Keyboard8eBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[191]">Keyboard::fBtClick()</a> from keyboard.o(i._ZN8Keyboard8fBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[192]">Keyboard::gBtClick()</a> from keyboard.o(i._ZN8Keyboard8gBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[193]">Keyboard::hBtClick()</a> from keyboard.o(i._ZN8Keyboard8hBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[18d]">Keyboard::iBtClick()</a> from keyboard.o(i._ZN8Keyboard8iBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[194]">Keyboard::jBtClick()</a> from keyboard.o(i._ZN8Keyboard8jBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[195]">Keyboard::kBtClick()</a> from keyboard.o(i._ZN8Keyboard8kBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1a0]">Keyboard::lBtClick()</a> from keyboard.o(i._ZN8Keyboard8lBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[19c]">Keyboard::mBtClick()</a> from keyboard.o(i._ZN8Keyboard8mBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[19b]">Keyboard::nBtClick()</a> from keyboard.o(i._ZN8Keyboard8nBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[19d]">Keyboard::oBtClick()</a> from keyboard.o(i._ZN8Keyboard8oBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[19f]">Keyboard::pBtClick()</a> from keyboard.o(i._ZN8Keyboard8pBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[186]">Keyboard::qBtClick()</a> from keyboard.o(i._ZN8Keyboard8qBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[189]">Keyboard::rBtClick()</a> from keyboard.o(i._ZN8Keyboard8rBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[18f]">Keyboard::sBtClick()</a> from keyboard.o(i._ZN8Keyboard8sBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[18a]">Keyboard::tBtClick()</a> from keyboard.o(i._ZN8Keyboard8tBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[18c]">Keyboard::uBtClick()</a> from keyboard.o(i._ZN8Keyboard8uBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[199]">Keyboard::vBtClick()</a> from keyboard.o(i._ZN8Keyboard8vBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[187]">Keyboard::wBtClick()</a> from keyboard.o(i._ZN8Keyboard8wBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[197]">Keyboard::xBtClick()</a> from keyboard.o(i._ZN8Keyboard8xBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[18b]">Keyboard::yBtClick()</a> from keyboard.o(i._ZN8Keyboard8yBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[196]">Keyboard::zBtClick()</a> from keyboard.o(i._ZN8Keyboard8zBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1a1]">Keyboard::blBtClick()</a> from keyboard.o(i._ZN8Keyboard9blBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[19e]">Keyboard::dxBtClick()</a> from keyboard.o(i._ZN8Keyboard9dxBtClickEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[1d7]">STM32DMA::initialize()</a> from stm32dma.o(i._ZN8STM32DMA10initializeEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1d4]">STM32DMA::getBlitCaps()</a> from stm32dma.o(i._ZN8STM32DMA11getBlitCapsEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1dd]">STM32DMA::setupDataCopy(const touchgfx::BlitOp&)</a> from stm32dma.o(i._ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1de]">STM32DMA::setupDataFill(const touchgfx::BlitOp&)</a> from stm32dma.o(i._ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1d9]">STM32DMA::signalDMAInterrupt()</a> from stm32dma.o(i._ZN8STM32DMA18signalDMAInterruptEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[c0]">STM32DMA::~STM32DMA()</a> from stm32dma.o(i._ZN8STM32DMAD1Ev) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[c0]">STM32DMA::~STM32DMA()</a> from stm32dma.o(i._ZN8STM32DMAD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[1e2]">touchgfx::KeySampler::init()</a> from keysampler.o(i._ZN8touchgfx10KeySampler4initEv) referenced from keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
 <LI><a href="#[1e3]">touchgfx::KeySampler::sample(unsigned char&)</a> from keysampler.o(i._ZN8touchgfx10KeySampler6sampleERh) referenced from keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
 <LI><a href="#[bb]">touchgfx::KeySampler::~KeySampler()</a> from keysampler.o(i._ZN8touchgfx10KeySamplerD1Ev) referenced from keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
 <LI><a href="#[bb]">touchgfx::KeySampler::~KeySampler()</a> from keysampler.o(i._ZN8touchgfx10KeySamplerD1Ev) referenced from touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6)
 <LI><a href="#[1e9]">touchgfx::Transition::invalidate()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition10invalidateEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[1ea]">touchgfx::Transition::setScreenContainer(touchgfx::Container&)</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[1e8]">touchgfx::Transition::init()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[1e7]">touchgfx::Transition::tearDown()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[173]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[173]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[173]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[173]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[171]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[171]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[171]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[171]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[17f]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[17f]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[17f]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[170]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[170]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[170]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[170]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[172]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[172]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[172]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[172]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[178]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[178]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[178]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[178]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1e4]">touchgfx::Application::handlePendingScreenTransition()</a> from application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[177]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[177]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[177]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[177]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[176]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[176]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[176]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[176]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1e6]">touchgfx::NoTransition::handleTickEvent()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[1e5]">touchgfx::NoTransition::~NoTransition()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[1ee]">touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen1viewbase.o(t._ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEE16handleClickEventERKNS_10ClickEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[1d5]">touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1df]">touchgfx::DMA_Interface::enableAlpha(unsigned char)</a> from dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1e0]">touchgfx::DMA_Interface::disableAlpha()</a> from dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1dc]">touchgfx::DMA_Interface::seedExecution()</a> from dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1db]">touchgfx::DMA_Interface::executeCompleted()</a> from dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1e1]">touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</a> from dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1d6]">touchgfx::DMA_Interface::flush()</a> from stm32dma.o(i._ZN8touchgfx13DMA_Interface5flushEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1d8]">touchgfx::DMA_Interface::start()</a> from dma.o(i._ZN8touchgfx13DMA_Interface5startEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[1da]">touchgfx::DMA_Interface::execute()</a> from dma.o(i._ZN8touchgfx13DMA_Interface7executeEv) referenced from stm32dma.o(.constdata__ZTV8STM32DMA)
 <LI><a href="#[9b]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[9b]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv)
 <LI><a href="#[9b]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_verdana_28_4bpp.o(i._Z23getFont_verdana_28_4bppv)
 <LI><a href="#[9b]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_verdana_40_4bpp.o(i._Z23getFont_verdana_40_4bppv)
 <LI><a href="#[9b]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_microsoftyahei_32_4bpp.o(i._Z30getFont_MicrosoftYaHei_32_4bppv)
 <LI><a href="#[9b]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_microsoftyahei_bold_28_4bpp.o(i._Z35getFont_MicrosoftYaHei_Bold_28_4bppv)
 <LI><a href="#[9b]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_microsoftyahei_bold_30_4bpp.o(i._Z35getFont_MicrosoftYaHei_Bold_30_4bppv)
 <LI><a href="#[9b]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_microsoftyahei_bold_40_4bpp.o(i._Z35getFont_MicrosoftYaHei_Bold_40_4bppv)
 <LI><a href="#[207]">touchgfx::AbstractButton::executeAction()</a> from button.o(i._ZN8touchgfx14AbstractButton13executeActionEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[207]">touchgfx::AbstractButton::executeAction()</a> from button.o(i._ZN8touchgfx14AbstractButton13executeActionEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[206]">touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[206]">touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[175]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[175]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[175]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[203]">touchgfx::ButtonWithLabel::~ButtonWithLabel()</a> from keyboard.o(i._ZN8touchgfx15ButtonWithLabelD1Ev) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[209]">touchgfx::AbstractPartition::~AbstractPartition__sub_object()</a> from abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev) referenced from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[20d]">touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[20e]">touchgfx::LockFreeDMA_Queue::pop()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[20f]">touchgfx::LockFreeDMA_Queue::first()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[20c]">touchgfx::LockFreeDMA_Queue::isFull()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[20b]">touchgfx::LockFreeDMA_Queue::isEmpty()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[214]">touchgfx::MCUInstrumentation::getCCConsumed()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[215]">touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[1f0]">touchgfx::TextAreaWithOneWildcard::getTextHeight()</a> from screen1viewbase.o(i._ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[1f0]">touchgfx::TextAreaWithOneWildcard::getTextHeight()</a> from screen1viewbase.o(i._ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[210]">touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()</a> from screen1view.o(i._ZN8touchgfx23TextAreaWithOneWildcardD1Ev) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[212]">touchgfx::CortexMMCUInstrumentation::getCPUCycles()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[213]">touchgfx::CortexMMCUInstrumentation::setMCUActive(bool)</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[211]">touchgfx::CortexMMCUInstrumentation::init()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation4initEv) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[ba]">touchgfx::CortexMMCUInstrumentation::~CortexMMCUInstrumentation()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentationD1Ev) referenced from cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
 <LI><a href="#[ba]">touchgfx::CortexMMCUInstrumentation::~CortexMMCUInstrumentation()</a> from cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentationD1Ev) referenced from touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6)
 <LI><a href="#[21f]">touchgfx::HAL::FlushCache()</a> from hal.o(i._ZN8touchgfx3HAL10FlushCacheEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[21c]">touchgfx::HAL::beginFrame()</a> from hal.o(i._ZN8touchgfx3HAL10beginFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[218]">touchgfx::HAL::initialize()</a> from hal.o(i._ZN8touchgfx3HAL10initializeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[e8]">touchgfx::HAL::getBlitCaps()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e8]">touchgfx::HAL::getBlitCaps()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ed]">touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)</a> from hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ed]">touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)</a> from hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[21e]">touchgfx::HAL::InvalidateCache()</a> from hal.o(i._ZN8touchgfx3HAL15InvalidateCacheEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f1]">touchgfx::HAL::backPorchExited()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f1]">touchgfx::HAL::backPorchExited()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[e4]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e4]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ec]">touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ec]">touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[219]">touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</a> from hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[e2]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e2]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f9]">touchgfx::HAL::getTFTCurrentLine()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f9]">touchgfx::HAL::getTFTCurrentLine()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[e5]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e5]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f0]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f0]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[de]">touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[de]">touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f7]">touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</a> from hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f7]">touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</a> from hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[21b]">touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)</a> from touchgfxgeneratedhal.o(i._ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[100]">touchgfx::HAL::performDisplayOrientationChange()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[100]">touchgfx::HAL::performDisplayOrientationChange()</a> from touchgfxhal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[fa]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[fa]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[fe]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[fe]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ff]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ff]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[e9]">touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e9]">touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[eb]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[eb]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ea]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ea]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ef]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ef]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ee]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ee]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[21d]">touchgfx::HAL::endFrame()</a> from hal.o(i._ZN8touchgfx3HAL8endFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[e3]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[e3]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[21a]">touchgfx::HAL::blockCopy(void*, const void*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[f8]">touchgfx::HAL::taskDelay(unsigned short)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[f8]">touchgfx::HAL::taskDelay(unsigned short)</a> from touchgfxhal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[cc]">touchgfx::Rect::Rect()</a> from keyboardbase.o(i._ZN8touchgfx4RectC1Ev) referenced from application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev)
 <LI><a href="#[225]">touchgfx::Image::setBitmap(const touchgfx::Bitmap&)</a> from image.o(i._ZN8touchgfx5Image9setBitmapERKNS_6BitmapE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[9d]">touchgfx::BlitOp::BlitOp()</a> from stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev) referenced from stm32dma.o(i._ZN8STM32DMAC1Ev)
 <LI><a href="#[208]">touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[208]">touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[228]">touchgfx::Screen::setupScreen()</a> from screen.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[dd]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[dd]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[dd]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[16c]">touchgfx::Screen::tearDownScreen()</a> from screen1viewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[16c]">touchgfx::Screen::tearDownScreen()</a> from screen1viewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[d7]">touchgfx::Screen::afterTransition()</a> from screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[d7]">touchgfx::Screen::afterTransition()</a> from screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[d7]">touchgfx::Screen::afterTransition()</a> from screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[da]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[da]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[da]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[dc]">touchgfx::Screen::handleTickEvent()</a> from screen1view.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[dc]">touchgfx::Screen::handleTickEvent()</a> from screen1view.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[dc]">touchgfx::Screen::handleTickEvent()</a> from screen1view.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[d9]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[d9]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[d9]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[db]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[db]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[db]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[d5]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[d5]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[d5]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[227]">touchgfx::Screen::~Screen()</a> from screen.o(i._ZN8touchgfx6ScreenD1Ev) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[1ed]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[1ed]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1ed]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1ed]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[1ed]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[1ed]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[1ed]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[1ed]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[229]">touchgfx::Callback&lang;Screen1View, Keyboard&, void, void&rang;::execute(Keyboard&)</a> from screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewR8KeyboardvvE7executeES3_) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewR8KeyboardvvEE)
 <LI><a href="#[22b]">touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::execute(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)</a> from screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvE7executeES4_S7_) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
 <LI><a href="#[22d]">touchgfx::Callback&lang;KeyboardBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from keyboardbase.o(t._ZN8touchgfx8CallbackI12KeyboardBaseRKNS_14AbstractButtonEvvE7executeES4_) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx8CallbackI12KeyboardBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[22f]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</a> from frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[1ef]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[1ef]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1ef]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1ef]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[1ef]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[1ef]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[1ef]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[1ef]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[1ef]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from keyboardbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[111]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[112]">touchgfx::Drawable::handleTickEvent()</a> from keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[10f]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[10f]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[10f]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[10f]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[10f]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[10f]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[10f]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[10f]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[10f]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[110]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[10b]">touchgfx::Drawable::setX(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setXEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[10c]">touchgfx::Drawable::setY(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable4setYEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[10d]">touchgfx::Drawable::setWidth(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[10e]">touchgfx::Drawable::setHeight(short)</a> from keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[234]">touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[231]">touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[9e]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAE)
 <LI><a href="#[9e]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv)
 <LI><a href="#[9f]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAE)
 <LI><a href="#[9f]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv)
 <LI><a href="#[a0]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAE)
 <LI><a href="#[a0]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv)
 <LI><a href="#[a1]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAE)
 <LI><a href="#[a1]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv)
 <LI><a href="#[aa]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[aa]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv)
 <LI><a href="#[ab]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[ab]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv)
 <LI><a href="#[a4]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[a4]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv)
 <LI><a href="#[a6]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[a6]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
 <LI><a href="#[b2]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[b2]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv)
 <LI><a href="#[a2]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[a2]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv)
 <LI><a href="#[a5]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[a5]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv)
 <LI><a href="#[a7]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[a7]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
 <LI><a href="#[b3]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[b3]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv)
 <LI><a href="#[b6]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[b6]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv)
 <LI><a href="#[a3]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[a3]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv)
 <LI><a href="#[a8]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[a8]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
 <LI><a href="#[b7]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[b7]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv)
 <LI><a href="#[ae]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[ae]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv)
 <LI><a href="#[b0]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[b0]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
 <LI><a href="#[b8]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[b8]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv)
 <LI><a href="#[a9]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[a9]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
 <LI><a href="#[ac]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[ac]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
 <LI><a href="#[af]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[af]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv)
 <LI><a href="#[b1]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[b1]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
 <LI><a href="#[b9]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[b9]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv)
 <LI><a href="#[ad]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[ad]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
 <LI><a href="#[b4]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[b4]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
 <LI><a href="#[b5]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[b5]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
 <LI><a href="#[232]">touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[233]">touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[236]">touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[c1]">touchgfx::LCD16bpp::~LCD16bpp()</a> from touchgfxconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[c1]">touchgfx::LCD16bpp::~LCD16bpp()</a> from touchgfxconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[239]">touchgfx::TextArea::getTextHeight()</a> from textarea.o(i._ZN8touchgfx8TextArea13getTextHeightEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[237]">touchgfx::TextArea::~TextArea()</a> from screen1view.o(i._ZN8touchgfx8TextAreaD1Ev) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[108]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[108]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[108]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[113]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[113]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[113]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[116]">touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</a> from container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[116]">touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</a> from container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[116]">touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</a> from container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[114]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[114]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[114]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[115]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[115]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[115]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[23b]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[23c]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[23d]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[23e]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[23f]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[240]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[e6]">TouchGFXHAL::getTFTFrameBuffer() const</a> from touchgfxhal.o(i._ZNK11TouchGFXHAL17getTFTFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[17b]">HardwareMJPEGDecoder::getCurrentFrameNumber() const</a> from hardwaremjpegdecoder.o(i._ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv) referenced from hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
 <LI><a href="#[1fe]">touchgfx::GeneratedFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const</a> from generatedfont.o(i._ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[200]">touchgfx::GeneratedFont::getGSUBTable() const</a> from generatedfont.o(i._ZNK8touchgfx13GeneratedFont12getGSUBTableEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[202]">touchgfx::GeneratedFont::getPixelData(const touchgfx::GlyphNode*) const</a> from generatedfont.o(i._ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[201]">touchgfx::GeneratedFont::getContextualFormsTable() const</a> from generatedfont.o(i._ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[204]">touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const</a> from buttonwithlabel.o(i._ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1f1]">touchgfx::TextAreaWithOneWildcard::getTextWidth() const</a> from screen1viewbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[1f1]">touchgfx::TextAreaWithOneWildcard::getTextWidth() const</a> from screen1viewbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1eb]">touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const</a> from textareawithwildcard.o(i._ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[1eb]">touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const</a> from textareawithwildcard.o(i._ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[217]">touchgfx::Box::getSolidRect() const</a> from box.o(i._ZNK8touchgfx3Box12getSolidRectEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[216]">touchgfx::Box::draw(const touchgfx::Rect&) const</a> from box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[220]">touchgfx::Font::getKerning(unsigned short, const touchgfx::GlyphNode*) const</a> from texts.o(i._ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[221]">touchgfx::Font::getGSUBTable() const</a> from texts.o(i._ZNK8touchgfx4Font12getGSUBTableEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[221]">touchgfx::Font::getGSUBTable() const</a> from texts.o(i._ZNK8touchgfx4Font12getGSUBTableEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1fa]">touchgfx::Font::getFontHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font13getFontHeightEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1fa]">touchgfx::Font::getFontHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font13getFontHeightEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[1fa]">touchgfx::Font::getFontHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font13getFontHeightEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1f7]">touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</a> from texts.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1f7]">touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</a> from texts.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[1f7]">touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</a> from texts.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1fc]">touchgfx::Font::getBitsPerPixel() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1fc]">touchgfx::Font::getBitsPerPixel() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[1fc]">touchgfx::Font::getBitsPerPixel() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1fd]">touchgfx::Font::getByteAlignRow() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getByteAlignRowEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1fd]">touchgfx::Font::getByteAlignRow() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getByteAlignRowEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[1fd]">touchgfx::Font::getByteAlignRow() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getByteAlignRowEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1f6]">touchgfx::Font::getEllipsisChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getEllipsisCharEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1f6]">touchgfx::Font::getEllipsisChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getEllipsisCharEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[1f6]">touchgfx::Font::getEllipsisChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getEllipsisCharEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1f5]">touchgfx::Font::getFallbackChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getFallbackCharEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1f5]">touchgfx::Font::getFallbackChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getFallbackCharEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[1f5]">touchgfx::Font::getFallbackChar() const</a> from cachedfont.o(i._ZNK8touchgfx4Font15getFallbackCharEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1f8]">touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font15getSpacingAboveEPKtz) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1f8]">touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font15getSpacingAboveEPKtz) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[1f8]">touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font15getSpacingAboveEPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1f9]">touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getMaxTextHeightEPKtz) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1f9]">touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getMaxTextHeightEPKtz) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[1f9]">touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getMaxTextHeightEPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1ff]">touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getNumberOfLinesEPKtz) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1ff]">touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getNumberOfLinesEPKtz) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[1ff]">touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getNumberOfLinesEPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1fb]">touchgfx::Font::getMinimumTextHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1fb]">touchgfx::Font::getMinimumTextHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[1fb]">touchgfx::Font::getMinimumTextHeight() const</a> from cachedfont.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[222]">touchgfx::Font::getContextualFormsTable() const</a> from texts.o(i._ZNK8touchgfx4Font23getContextualFormsTableEv) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[222]">touchgfx::Font::getContextualFormsTable() const</a> from texts.o(i._ZNK8touchgfx4Font23getContextualFormsTableEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1f4]">touchgfx::Font::getGlyph(unsigned short) const</a> from cachedfont.o(i._ZNK8touchgfx4Font8getGlyphEt) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1f4]">touchgfx::Font::getGlyph(unsigned short) const</a> from cachedfont.o(i._ZNK8touchgfx4Font8getGlyphEt) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[1f4]">touchgfx::Font::getGlyph(unsigned short) const</a> from cachedfont.o(i._ZNK8touchgfx4Font8getGlyphEt) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[224]">touchgfx::Image::getSolidRect() const</a> from image.o(i._ZNK8touchgfx5Image12getSolidRectEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[223]">touchgfx::Image::draw(const touchgfx::Rect&) const</a> from image.o(i._ZNK8touchgfx5Image4drawERKNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[205]">touchgfx::Button::getSolidRect() const</a> from button.o(i._ZNK8touchgfx6Button12getSolidRectEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[205]">touchgfx::Button::getSolidRect() const</a> from button.o(i._ZNK8touchgfx6Button12getSolidRectEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[226]">touchgfx::Button::draw(const touchgfx::Rect&) const</a> from button.o(i._ZNK8touchgfx6Button4drawERKNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[22a]">touchgfx::Callback&lang;Screen1View, Keyboard&, void, void&rang;::isValid() const</a> from screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewR8KeyboardvvE7isValidEv) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewR8KeyboardvvEE)
 <LI><a href="#[22c]">touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::isValid() const</a> from screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvE7isValidEv) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
 <LI><a href="#[22e]">touchgfx::Callback&lang;KeyboardBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from keyboardbase.o(t._ZNK8touchgfx8CallbackI12KeyboardBaseRKNS_14AbstractButtonEvvE7isValidEv) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx8CallbackI12KeyboardBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[230]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</a> from frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[107]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[109]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[106]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[10a]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[235]">touchgfx::LCD16bpp::framebufferFormat() const</a> from lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp17framebufferFormatEv) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[1ec]">touchgfx::TextArea::getSolidRect() const</a> from screen1viewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[1ec]">touchgfx::TextArea::getSolidRect() const</a> from screen1viewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1ec]">touchgfx::TextArea::getSolidRect() const</a> from screen1viewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[23a]">touchgfx::TextArea::getTextWidth() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[1f2]">touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const</a> from textarea.o(i._ZNK8touchgfx8TextArea19calculateTextHeightEPKtz) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[1f2]">touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const</a> from textarea.o(i._ZNK8touchgfx8TextArea19calculateTextHeightEPKtz) referenced from textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1f2]">touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const</a> from textarea.o(i._ZNK8touchgfx8TextArea19calculateTextHeightEPKtz) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[238]">touchgfx::TextArea::draw(const touchgfx::Rect&) const</a> from textarea.o(i._ZNK8touchgfx8TextArea4drawERKNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[1f3]">touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</a> from constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[1f3]">touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</a> from constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[105]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[105]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[105]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[104]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from keyboardbase.o(.constdata__ZTV12KeyboardBase)
 <LI><a href="#[104]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from keyboard.o(.constdata__ZTV8Keyboard)
 <LI><a href="#[104]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[20a]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[20a]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[20a]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[20a]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[20a]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[20a]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[8c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f769xx.o(.text)
 <LI><a href="#[245]">__sti___15_Application_cpp_63cd8d44</a> from application.o(i.__sti___15_Application_cpp_63cd8d44) referenced from application.o(.init_array)
 <LI><a href="#[241]">__sti___15_TouchGFXHAL_cpp_c3b64dc6</a> from touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6) referenced from touchgfxhal.o(.init_array)
 <LI><a href="#[244]">__sti___21_typedtextdatabase_cpp_05ec7672</a> from typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_05ec7672) referenced from typedtextdatabase.o(.init_array)
 <LI><a href="#[243]">__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb</a> from touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb) referenced from touchgfxgeneratedhal.o(.init_array)
 <LI><a href="#[242]">__sti___25_TouchGFXConfiguration_cpp_f5abfd34</a> from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34) referenced from touchgfxconfiguration.o(.init_array)
 <LI><a href="#[246]">__sti___7_LCD_cpp_86507772</a> from lcd.o(i.__sti___7_LCD_cpp_86507772) referenced from lcd.o(.init_array)
 <LI><a href="#[9]">ft6x06_Init</a> from ft6x06.o(i.ft6x06_Init) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[a]">ft6x06_ReadID</a> from ft6x06.o(i.ft6x06_ReadID) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[b]">ft6x06_Reset</a> from ft6x06.o(i.ft6x06_Reset) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[10]">ft6x06_TS_ClearIT</a> from ft6x06.o(i.ft6x06_TS_ClearIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[d]">ft6x06_TS_DetectTouch</a> from ft6x06.o(i.ft6x06_TS_DetectTouch) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[12]">ft6x06_TS_DisableIT</a> from ft6x06.o(i.ft6x06_TS_DisableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[f]">ft6x06_TS_EnableIT</a> from ft6x06.o(i.ft6x06_TS_EnableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[e]">ft6x06_TS_GetXY</a> from ft6x06.o(i.ft6x06_TS_GetXY) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[11]">ft6x06_TS_ITStatus</a> from ft6x06.o(i.ft6x06_TS_ITStatus) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[c]">ft6x06_TS_Start</a> from ft6x06.o(i.ft6x06_TS_Start) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[8a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[ca]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[c7]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[cb]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[c6]">videoTaskFunc</a> from touchgfxgeneratedhal.o(i.videoTaskFunc) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(.text)
</UL>
<P><STRONG><a name="[485]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[248]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[258]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[486]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[24a]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[487]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[488]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[489]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[48a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[24b]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[48b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[19]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[47a]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[479]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1b]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[46e]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>CAN3_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>CAN3_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>CAN3_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>CAN3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[24e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[3a0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustHindiGlyph(const touchgfx::GlyphNode*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
</UL>

<P><STRONG><a name="[2b4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[48c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[48d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[48e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::initialize()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::clrBtClick()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[48f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[247]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[254]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_TouchGFXHAL_cpp_c3b64dc6
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_28_4bpp()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_40_4bpp()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_30_4bpp()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_28_4bpp()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_32_4bpp()
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_BilinearInterpolation()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_BilinearInterpolation()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_NearestNeighbor()
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation()
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation()
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_NearestNeighbor()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_NearestNeighbor()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_NearestNeighbor()
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_NearestNeighbor()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation()
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_NearestNeighbor()
</UL>

<P><STRONG><a name="[250]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[490]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[491]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[425]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[24c]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[249]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[492]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[493]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[494]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[495]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>BSP_PB_GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, buttons.o(i.BSP_PB_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Buttons::sample()
</UL>

<P><STRONG><a name="[25b]"></a>BSP_PB_Init</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, buttons.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Buttons::init()
</UL>

<P><STRONG><a name="[360]"></a>BSP_TS_GetState</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, stm32touchcontroller.o(i.BSP_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_TS_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32TouchController::sampleTouch(int&, int&)
</UL>

<P><STRONG><a name="[361]"></a>BSP_TS_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32touchcontroller.o(i.BSP_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_TS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32TouchController::init()
</UL>

<P><STRONG><a name="[17]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[38e]"></a>CRC_Lock</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32_crc_lock.o(i.CRC_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[76]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_IRQHandler &rArr; HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[265]"></a>DSI_IO_WriteCmd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, touchgfxhal.o(i.DSI_IO_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DSI_IO_WriteCmd &rArr; HAL_DSI_ShortWrite &rArr; DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
</UL>

<P><STRONG><a name="[7e]"></a>DSI_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DSI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DSI_IRQHandler &rArr; HAL_DSI_IRQHandler &rArr; HAL_DSI_TearingEffectCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[294]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[2cc]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[2ce]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[2cf]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[2cd]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 164 bytes, Stack size 36 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[26d]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32f7xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[26b]"></a>HAL_CRC_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f7xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26c]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[26f]"></a>HAL_DMA2D_CLUTLoadingCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoadingCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[2f5]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[263]"></a>HAL_DMA2D_IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_LineEventCallback
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoadingCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[270]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[26e]"></a>HAL_DMA2D_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[271]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>

<P><STRONG><a name="[2e2]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAErrorCallback
</UL>

<P><STRONG><a name="[264]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[272]"></a>HAL_DMA_Init</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
</UL>

<P><STRONG><a name="[275]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Resume
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_StartProcess
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAOutCpltCallback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAInCpltCallback
</UL>

<P><STRONG><a name="[2fe]"></a>HAL_DSI_ConfigAdaptedCommandMode</STRONG> (Thumb, 272 bytes, Stack size 20 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigAdaptedCommandMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DSI_ConfigAdaptedCommandMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[2fd]"></a>HAL_DSI_ConfigCommand</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DSI_ConfigCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[2fc]"></a>HAL_DSI_ConfigErrorMonitor</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigErrorMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DSI_ConfigErrorMonitor
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[2fa]"></a>HAL_DSI_ConfigFlowControl</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigFlowControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_ConfigFlowControl
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[2f8]"></a>HAL_DSI_ConfigHostTimeouts</STRONG> (Thumb, 248 bytes, Stack size 12 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigHostTimeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DSI_ConfigHostTimeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[2f9]"></a>HAL_DSI_ConfigPhyTimer</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigPhyTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DSI_ConfigPhyTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[277]"></a>HAL_DSI_EndOfRefreshCallback</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, touchgfxhal.o(i.HAL_DSI_EndOfRefreshCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_DSI_EndOfRefreshCallback &rArr; LCD_SetUpdateRegion &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Refresh
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetUpdateRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>

<P><STRONG><a name="[27c]"></a>HAL_DSI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>

<P><STRONG><a name="[268]"></a>HAL_DSI_IRQHandler</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_DSI_IRQHandler &rArr; HAL_DSI_TearingEffectCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_EndOfRefreshCallback
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IRQHandler
</UL>

<P><STRONG><a name="[27d]"></a>HAL_DSI_Init</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_DSI_Init &rArr; HAL_DSI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[267]"></a>HAL_DSI_LongWrite</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_LongWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ConfigPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetUpdateRegion
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReqTear
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
</UL>

<P><STRONG><a name="[27e]"></a>HAL_DSI_MspInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_DSI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DSI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
</UL>

<P><STRONG><a name="[279]"></a>HAL_DSI_Refresh</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_EndOfRefreshCallback
</UL>

<P><STRONG><a name="[2ff]"></a>HAL_DSI_SetGenericVCID</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_SetGenericVCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_SetGenericVCID
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[2fb]"></a>HAL_DSI_SetLowPowerRXFilter</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_SetLowPowerRXFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_SetLowPowerRXFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[266]"></a>HAL_DSI_ShortWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ShortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DSI_ShortWrite &rArr; DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ShortWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::taskEntry()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReqTear
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[306]"></a>HAL_DSI_Start</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[27b]"></a>HAL_DSI_TearingEffectCallback</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, touchgfxhal.o(i.HAL_DSI_TearingEffectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_DSI_TearingEffectCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Refresh
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetUpdateRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>

<P><STRONG><a name="[261]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_IO_Delay
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[291]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 306 bytes, Stack size 36 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[25c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[25a]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
</UL>

<P><STRONG><a name="[3d1]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)
</UL>

<P><STRONG><a name="[2f7]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
</UL>

<P><STRONG><a name="[26a]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ShortWrite
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[303]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
</UL>

<P><STRONG><a name="[304]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
</UL>

<P><STRONG><a name="[285]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error(__I2C_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[2dc]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_EV_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_EV_IRQHandler
</UL>

<P><STRONG><a name="[287]"></a>HAL_I2C_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
</UL>

<P><STRONG><a name="[289]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[28e]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[286]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[288]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 172 bytes, Stack size 184 bytes, stm32f7xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[2db]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[295]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[297]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_JPEG_ConfigInputBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_ConfigInputBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
</UL>

<P><STRONG><a name="[29f]"></a>HAL_JPEG_ConfigOutputBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_ConfigOutputBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
</UL>

<P><STRONG><a name="[29d]"></a>HAL_JPEG_DataReadyCallback</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_DataReadyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Pause
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ConfigOutputBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_StoreOutputData
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAOutCpltCallback
</UL>

<P><STRONG><a name="[2e7]"></a>HAL_JPEG_DecodeCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_DecodeCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[2a0]"></a>HAL_JPEG_Decode_DMA</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_Decode_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_JPEG_Decode_DMA &rArr; JPEG_DMA_StartProcess &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Init_Process
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_StartProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Decode_DMA
</UL>

<P><STRONG><a name="[2e6]"></a>HAL_JPEG_EncodeCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_EncodeCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>

<P><STRONG><a name="[2a3]"></a>HAL_JPEG_ErrorCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_ErrorCallback))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetState
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAOutCpltCallback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAInCpltCallback
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAErrorCallback
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_JPEG_GetDataCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_GetDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_JPEG_GetDataCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ConfigInputBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ReadInputData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAInCpltCallback
</UL>

<P><STRONG><a name="[2a5]"></a>HAL_JPEG_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
</UL>

<P><STRONG><a name="[2e4]"></a>HAL_JPEG_GetInfo</STRONG> (Thumb, 250 bytes, Stack size 36 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_GetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_JPEG_GetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>

<P><STRONG><a name="[2a4]"></a>HAL_JPEG_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
</UL>

<P><STRONG><a name="[2a8]"></a>HAL_JPEG_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_JPEG_IRQHandler &rArr; JPEG_Process &rArr; JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_IRQHandler
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_JPEG_InfoReadyCallback</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i.HAL_JPEG_InfoReadyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_JPEG_InfoReadyCallback &rArr; TGFX_JPEG_GetDecodeColorConvertFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_GetDecodeColorConvertFunc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_GetDecodeColorConvertFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
</UL>

<P><STRONG><a name="[2ae]"></a>HAL_JPEG_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 2180<LI>Call Chain = HAL_JPEG_Init &rArr; JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2af]"></a>HAL_JPEG_MspInit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f7xx_hal_msp.o(i.HAL_JPEG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_JPEG_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
</UL>

<P><STRONG><a name="[29e]"></a>HAL_JPEG_Pause</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_Pause))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ReadInputData
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_JPEG_Resume</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, stm32f7xx_hal_jpeg.o(i.HAL_JPEG_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_PollResidualData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_OutputHandler
</UL>

<P><STRONG><a name="[2b3]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[2ba]"></a>HAL_LTDC_Init</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[2b8]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 100 bytes, Stack size 160 bytes, stm32f7xx_hal_msp.o(i.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[308]"></a>HAL_LTDC_SetPitch</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_SetPitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_LTDC_SetPitch
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[2f2]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[2f1]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[2f3]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[298]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[292]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[25e]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::configureInterrupts()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_MspInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[296]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2be]"></a>HAL_QSPI_AutoPolling</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_AutoPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_QSPI_AutoPolling &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterMemory_QPI
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
</UL>

<P><STRONG><a name="[2c1]"></a>HAL_QSPI_Command</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterMemory_QPI
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[2c2]"></a>HAL_QSPI_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[2c4]"></a>HAL_QSPI_MemoryMapped</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_MemoryMapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_QSPI_MemoryMapped &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[2c3]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, stm32f7xx_hal_msp.o(i.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[293]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1336 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[299]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[29a]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2c8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[2c9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 906 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
</UL>

<P><STRONG><a name="[2cb]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_hal_msp.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[262]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[260]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[2d8]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2da]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[29b]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[29c]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2d3]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2d2]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[2d4]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2d9]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.I2C4_EV_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>IdleTaskHook</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, touchgfxhal.o(i.IdleTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IdleTaskHook &rArr; touchgfx::HAL::setMCUActive(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.vApplicationIdleHook)
</UL>
<P><STRONG><a name="[2e8]"></a>JPEG_Decode_DMA</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, hardwaremjpegdecoder.o(i.JPEG_Decode_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = JPEG_Decode_DMA &rArr; HAL_JPEG_Decode_DMA &rArr; JPEG_DMA_StartProcess &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Decode_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[2ad]"></a>JPEG_GetDecodeColorConvertFunc</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JPEG_GetDecodeColorConvertFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
</UL>

<P><STRONG><a name="[88]"></a>JPEG_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.JPEG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = JPEG_IRQHandler &rArr; HAL_JPEG_IRQHandler &rArr; JPEG_Process &rArr; JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2e9]"></a>JPEG_OutputHandler</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, hardwaremjpegdecoder.o(i.JPEG_OutputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = JPEG_OutputHandler &rArr; HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[2ef]"></a>LCD_ReqTear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, touchgfxhal.o(i.LCD_ReqTear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_ReqTear &rArr; HAL_DSI_ShortWrite &rArr; DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::enableLCDControllerInterrupt()
</UL>

<P><STRONG><a name="[278]"></a>LCD_SetUpdateRegion</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, touchgfxhal.o(i.LCD_SetUpdateRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_SetUpdateRegion &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_EndOfRefreshCallback
</UL>

<P><STRONG><a name="[74]"></a>LTDC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[302]"></a>MX_I2C4_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_I2C4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error(__I2C_HandleTypeDef*, unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42a]"></a>MX_LIBJPEG_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, libjpeg.o(i.MX_LIBJPEG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30f]"></a>MX_TouchGFX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_touchgfx.o(i.MX_TouchGFX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_TouchGFX_Init &rArr; touchgfx_init &rArr; TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[311]"></a>OTM8009A_IO_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i.OTM8009A_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OTM8009A_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
</UL>

<P><STRONG><a name="[307]"></a>OTM8009A_Init</STRONG> (Thumb, 1044 bytes, Stack size 16 bytes, otm8009a.o(i.OTM8009A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OTM8009A_Init &rArr; DSI_IO_WriteCmd &rArr; HAL_DSI_ShortWrite &rArr; DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_IO_Delay
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[c4]"></a>StartDefaultTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = StartDefaultTask &rArr;  StartDefaultTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1c]"></a>SysTick_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[315]"></a>SystemClock_Config</STRONG> (Thumb, 132 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, system_stm32f7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(.text)
</UL>
<P><STRONG><a name="[2ac]"></a>TGFX_JPEG_GetDecodeColorConvertFunc</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TGFX_JPEG_GetDecodeColorConvertFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
</UL>

<P><STRONG><a name="[316]"></a>TGFX_JPEG_InitColorTables</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tgfx_jpeg_utils.o(i.TGFX_JPEG_InitColorTables))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TGFX_JPEG_InitColorTables &rArr; TGFX_JPEG_Init_MCU_LUT
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_Init_MCU_LUT
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_InitPreProcColorTables
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::HardwareMJPEGDecoder()
</UL>

<P><STRONG><a name="[53]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2d1]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[429]"></a>TS_IO_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32touchcontroller.o(i.TS_IO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_ReadID
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_Init
</UL>

<P><STRONG><a name="[319]"></a>TS_IO_Read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, stm32touchcontroller.o(i.TS_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TS_IO_Read &rArr; I2Cx_ReadMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DetectTouch
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_ReadID
</UL>

<P><STRONG><a name="[31b]"></a>TS_IO_ReadMultiple</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32touchcontroller.o(i.TS_IO_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = TS_IO_ReadMultiple &rArr; I2Cx_ReadMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetXY
</UL>

<P><STRONG><a name="[31c]"></a>TS_IO_Write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, stm32touchcontroller.o(i.TS_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TS_IO_Write &rArr; I2Cx_WriteMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_EnableIT
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DisableIT
</UL>

<P><STRONG><a name="[c5]"></a>TouchGFX_Task</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_touchgfx.o(i.TouchGFX_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TouchGFX_Task &rArr; touchgfx_taskEntry &rArr; TouchGFXHAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_taskEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[18]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[36b]"></a>PinyinToChinese(char*, unsigned char)</STRONG> (Thumb, 144 bytes, Stack size 36 bytes, pinyin.o(i._Z15PinyinToChinesePch))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PinyinToChinese(char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtWXYZClick()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtPQRSClick()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtBackClick()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtTUVClick()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtMNOClick()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtJKLClick()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtGHIClick()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtDEFClick()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtABCClick()
</UL>

<P><STRONG><a name="[36c]"></a>PinyinPageUpdata(unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, pinyin.o(i._Z16PinyinPageUpdatat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PinyinPageUpdata(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelectBt5Click()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelectBt4Click()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelectBt3Click()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelectBt2Click()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelectBt1Click()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtWXYZClick()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtPQRSClick()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtBackClick()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtTUVClick()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtMNOClick()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtJKLClick()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtGHIClick()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtDEFClick()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtABCClick()
</UL>

<P><STRONG><a name="[320]"></a>getFont_verdana_10_4bpp()</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getFont_verdana_10_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[323]"></a>getFont_verdana_28_4bpp()</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, table_verdana_28_4bpp.o(i._Z23getFont_verdana_28_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getFont_verdana_28_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[324]"></a>getFont_verdana_40_4bpp()</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, table_verdana_40_4bpp.o(i._Z23getFont_verdana_40_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getFont_verdana_40_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[325]"></a>getFont_MicrosoftYaHei_32_4bpp()</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, table_microsoftyahei_32_4bpp.o(i._Z30getFont_MicrosoftYaHei_32_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getFont_MicrosoftYaHei_32_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[326]"></a>getFont_MicrosoftYaHei_Bold_28_4bpp()</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, table_microsoftyahei_bold_28_4bpp.o(i._Z35getFont_MicrosoftYaHei_Bold_28_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getFont_MicrosoftYaHei_Bold_28_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[327]"></a>getFont_MicrosoftYaHei_Bold_30_4bpp()</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, table_microsoftyahei_bold_30_4bpp.o(i._Z35getFont_MicrosoftYaHei_Bold_30_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getFont_MicrosoftYaHei_Bold_30_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[328]"></a>getFont_MicrosoftYaHei_Bold_40_4bpp()</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, table_microsoftyahei_bold_40_4bpp.o(i._Z35getFont_MicrosoftYaHei_Bold_40_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getFont_MicrosoftYaHei_Bold_40_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[d6]"></a>Screen1View::setupScreen()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1View11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Screen1View::setupScreen() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::setupScreen()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::setnb_entBtrCallback(touchgfx::GenericCallback&lang;Keyboard&, void, void&rang;&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::seten_entBtrCallback(touchgfx::GenericCallback&lang;Keyboard&, void, void&rang;&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::setcn_entBtrCallback(touchgfx::GenericCallback&lang;Keyboard&, void, void&rang;&)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::setescBtCallback(touchgfx::GenericCallback&lang;Keyboard&, void, void&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[d8]"></a>Screen1View::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1view.o(i._ZN11Screen1View14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[cd]"></a>Screen1View::textArea1ClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1View21textArea1ClickHandlerERKN8touchgfx23TextAreaWithOneWildcardERKNS0_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Screen1View::textArea1ClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&) &rArr; Keyboard::initialize() &rArr; touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText) &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>Screen1View::KeyboardEscBtClickHandler(Keyboard&)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1View25KeyboardEscBtClickHandlerER8Keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Screen1View::KeyboardEscBtClickHandler(Keyboard&) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::remove(touchgfx::Drawable&)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>Screen1View::KeyboardCnEnterBtClickHandler(Keyboard&)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1View29KeyboardCnEnterBtClickHandlerER8Keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Screen1View::KeyboardCnEnterBtClickHandler(Keyboard&) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::remove(touchgfx::Drawable&)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::getInputText(unsigned short*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>Screen1View::KeyboardEnEnterBtClickHandler(Keyboard&)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1View29KeyboardEnEnterBtClickHandlerER8Keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Screen1View::KeyboardEnEnterBtClickHandler(Keyboard&) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::remove(touchgfx::Drawable&)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::getInputText(unsigned short*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>Screen1View::KeyboardNbEnterBtClickHandler(Keyboard&)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1View29KeyboardNbEnterBtClickHandlerER8Keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Screen1View::KeyboardNbEnterBtClickHandler(Keyboard&) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::remove(touchgfx::Drawable&)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::getInputText(unsigned short*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata)
</UL>
<P><STRONG><a name="[32f]"></a>Screen1View::Screen1View()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1ViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Screen1View::Screen1View() &rArr; Keyboard::Keyboard() &rArr; KeyboardBase::KeyboardBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen1View, Keyboard&, void, void&rang;::Callback(Screen1View*, void(Screen1View::*)(Keyboard&))
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Keyboard()
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[496]"></a>Screen1View::Screen1View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1ViewC1Ev), UNUSED)

<P><STRONG><a name="[d4]"></a>Screen1View::~Screen1View()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1ViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Screen1View::~Screen1View() &rArr; KeyboardBase::~KeyboardBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::~KeyboardBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[497]"></a>Screen1View::~Screen1View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1ViewD1Ev), UNUSED)

<P><STRONG><a name="[fb]"></a>TouchGFXHAL::beginFrame()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL10beginFrameEv))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::beginFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[df]"></a>TouchGFXHAL::initialize()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CortexMMCUInstrumentation::init()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::init()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[f3]"></a>TouchGFXHAL::enableInterrupts()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL16enableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXHAL::enableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::enableInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[e1]"></a>TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&) &rArr; TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&) &rArr; SCB_CleanInvalidateDCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[f4]"></a>TouchGFXHAL::disableInterrupts()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL17disableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXHAL::disableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ(IRQn_Type)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::disableInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[fd]"></a>TouchGFXHAL::setTFTFrameBuffer(unsigned short*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL17setTFTFrameBufferEPt))
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::setTFTFrameBuffer(unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[f2]"></a>TouchGFXHAL::configureInterrupts()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL19configureInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TouchGFXHAL::configureInterrupts() &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::configureInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[f5]"></a>TouchGFXHAL::enableLCDControllerInterrupt()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL28enableLCDControllerInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TouchGFXHAL::enableLCDControllerInterrupt() &rArr; LCD_ReqTear &rArr; HAL_DSI_ShortWrite &rArr; DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReqTear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[f6]"></a>TouchGFXHAL::setFrameBufferStartAddresses(void*, void*, void*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXHAL::setFrameBufferStartAddresses(void*, void*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[fc]"></a>TouchGFXHAL::endFrame()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TouchGFXHAL::endFrame() &rArr; TouchGFXGeneratedHAL::endFrame() &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::endFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[e0]"></a>TouchGFXHAL::taskEntry()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL9taskEntryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TouchGFXHAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_taskEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[33f]"></a>TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, touchgfxhal.o(i._ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short) &rArr; touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[498]"></a>TouchGFXHAL::TouchGFXHAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, touchgfxhal.o(i._ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt), UNUSED)

<P><STRONG><a name="[c3]"></a>TouchGFXHAL::~TouchGFXHAL()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHALD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[499]"></a>TouchGFXHAL::~TouchGFXHAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHALD1Ev), UNUSED)

<P><STRONG><a name="[341]"></a>FrontendHeap::FrontendHeap()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FrontendHeap::FrontendHeap() &rArr; FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::AbstractPartition__sub_object()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::Model()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[49a]"></a>FrontendHeap::FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapC1Ev), UNUSED)

<P><STRONG><a name="[c8]"></a>FrontendHeap::~FrontendHeap()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FrontendHeap::~FrontendHeap()
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::~AbstractPartition__sub_object()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::~FrontendApplicationBase()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.touchgfx_init)
<LI> touchgfxconfiguration.o(.constdata__ZTV12FrontendHeap)
</UL>
<P><STRONG><a name="[49b]"></a>FrontendHeap::~FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev), UNUSED)

<P><STRONG><a name="[119]"></a>KeyboardBase::clrBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10clrBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[118]"></a>KeyboardBase::escBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10escBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[144]"></a>KeyboardBase::fh1BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10fh1BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[145]"></a>KeyboardBase::fh2BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10fh2BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[146]"></a>KeyboardBase::fh3BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10fh3BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[147]"></a>KeyboardBase::fh4BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10fh4BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[148]"></a>KeyboardBase::fh5BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10fh5BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[149]"></a>KeyboardBase::fh6BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10fh6BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[14a]"></a>KeyboardBase::fh7BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10fh7BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[14b]"></a>KeyboardBase::fh8BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10fh8BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[14c]"></a>KeyboardBase::fh9BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10fh9BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[117]"></a>KeyboardBase::initialize()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10initializeEv))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[143]"></a>KeyboardBase::nb0BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10nb0BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[13a]"></a>KeyboardBase::nb1BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10nb1BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[13b]"></a>KeyboardBase::nb2BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10nb2BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[13c]"></a>KeyboardBase::nb3BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10nb3BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[13d]"></a>KeyboardBase::nb4BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10nb4BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[13e]"></a>KeyboardBase::nb5BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10nb5BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[13f]"></a>KeyboardBase::nb6BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10nb6BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[140]"></a>KeyboardBase::nb7BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10nb7BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[141]"></a>KeyboardBase::nb8BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10nb8BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[142]"></a>KeyboardBase::nb9BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10nb9BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[11b]"></a>KeyboardBase::numBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase10numBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[14d]"></a>KeyboardBase::fh10BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase11fh10BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[14e]"></a>KeyboardBase::fh11BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase11fh11BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[14f]"></a>KeyboardBase::fh12BtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase11fh12BtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[155]"></a>KeyboardBase::cnBtABCClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase12cnBtABCClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[156]"></a>KeyboardBase::cnBtDEFClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase12cnBtDEFClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[169]"></a>KeyboardBase::cnBtDelClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase12cnBtDelClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[168]"></a>KeyboardBase::cnBtEntClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase12cnBtEntClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[157]"></a>KeyboardBase::cnBtGHIClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase12cnBtGHIClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[158]"></a>KeyboardBase::cnBtJKLClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase12cnBtJKLClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[159]"></a>KeyboardBase::cnBtMNOClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase12cnBtMNOClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[15b]"></a>KeyboardBase::cnBtTUVClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase12cnBtTUVClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[11a]"></a>KeyboardBase::cn_enBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase12cn_enBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[150]"></a>KeyboardBase::fhDelBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase12fhDelBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[151]"></a>KeyboardBase::fhEntBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase12fhEntBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[167]"></a>KeyboardBase::cnBtBackClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase13cnBtBackClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[152]"></a>KeyboardBase::cnBtLiftClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase13cnBtLiftClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[154]"></a>KeyboardBase::cnBtNoneClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase13cnBtNoneClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[15a]"></a>KeyboardBase::cnBtPQRSClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase13cnBtPQRSClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[15c]"></a>KeyboardBase::cnBtWXYZClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase13cnBtWXYZClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[139]"></a>KeyboardBase::en_delBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase13en_delBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[138]"></a>KeyboardBase::en_entBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase13en_entBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[153]"></a>KeyboardBase::cnBtRightClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase14cnBtRightClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[162]"></a>KeyboardBase::cnSelectBt1Click()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase16cnSelectBt1ClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[163]"></a>KeyboardBase::cnSelectBt2Click()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase16cnSelectBt2ClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[164]"></a>KeyboardBase::cnSelectBt3Click()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase16cnSelectBt3ClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[165]"></a>KeyboardBase::cnSelectBt4Click()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase16cnSelectBt4ClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[166]"></a>KeyboardBase::cnSelectBt5Click()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase16cnSelectBt5ClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[15d]"></a>KeyboardBase::pySelectBt1Click()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase16pySelectBt1ClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[15e]"></a>KeyboardBase::pySelectBt2Click()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase16pySelectBt2ClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[15f]"></a>KeyboardBase::pySelectBt3Click()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase16pySelectBt3ClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[160]"></a>KeyboardBase::pySelectBt4Click()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase16pySelectBt4ClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[161]"></a>KeyboardBase::pySelectBt5Click()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase16pySelectBt5ClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[d3]"></a>KeyboardBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</STRONG> (Thumb, 1372 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>KeyboardBase::aBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8aBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[130]"></a>KeyboardBase::bBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8bBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[12e]"></a>KeyboardBase::cBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8cBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[126]"></a>KeyboardBase::dBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8dBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[11e]"></a>KeyboardBase::eBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8eBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[127]"></a>KeyboardBase::fBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8fBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[128]"></a>KeyboardBase::gBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8gBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[129]"></a>KeyboardBase::hBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8hBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[123]"></a>KeyboardBase::iBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8iBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[12a]"></a>KeyboardBase::jBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8jBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[12b]"></a>KeyboardBase::kBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8kBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[136]"></a>KeyboardBase::lBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8lBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[132]"></a>KeyboardBase::mBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8mBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[131]"></a>KeyboardBase::nBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8nBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[133]"></a>KeyboardBase::oBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8oBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[135]"></a>KeyboardBase::pBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8pBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[11c]"></a>KeyboardBase::qBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8qBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[11f]"></a>KeyboardBase::rBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8rBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[125]"></a>KeyboardBase::sBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8sBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[120]"></a>KeyboardBase::tBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8tBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[122]"></a>KeyboardBase::uBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8uBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[12f]"></a>KeyboardBase::vBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8vBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[11d]"></a>KeyboardBase::wBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8wBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[12d]"></a>KeyboardBase::xBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8xBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[121]"></a>KeyboardBase::yBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8yBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[12c]"></a>KeyboardBase::zBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase8zBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[137]"></a>KeyboardBase::blBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase9blBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[134]"></a>KeyboardBase::dxBtClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN12KeyboardBase9dxBtClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[346]"></a>KeyboardBase::KeyboardBase()</STRONG> (Thumb, 9064 bytes, Stack size 112 bytes, keyboardbase.o(i._ZN12KeyboardBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = KeyboardBase::KeyboardBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::ButtonWithLabel()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::Container()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Keyboard()
</UL>

<P><STRONG><a name="[49c]"></a>KeyboardBase::KeyboardBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 112 bytes, keyboardbase.o(i._ZN12KeyboardBaseC1Ev), UNUSED)

<P><STRONG><a name="[103]"></a>KeyboardBase::~KeyboardBase()</STRONG> (Thumb, 844 bytes, Stack size 8 bytes, keyboard.o(i._ZN12KeyboardBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyboardBase::~KeyboardBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::~ButtonWithLabel()
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
</UL>
<P><STRONG><a name="[49d]"></a>KeyboardBase::~KeyboardBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, keyboard.o(i._ZN12KeyboardBaseD1Ev), UNUSED)

<P><STRONG><a name="[46a]"></a>BitmapDatabase::getInstance()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[469]"></a>BitmapDatabase::getInstanceSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[16b]"></a>Screen1ViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[330]"></a>Screen1ViewBase::Screen1ViewBase()</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
</UL>

<P><STRONG><a name="[49e]"></a>Screen1ViewBase::Screen1ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[16a]"></a>Screen1ViewBase::~Screen1ViewBase()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen1Presenter&rang;::~View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[49f]"></a>Screen1ViewBase::~Screen1ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[16e]"></a>Screen1Presenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1Presenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[16d]"></a>Screen1Presenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1Presenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[483]"></a>Screen1Presenter::Screen1Presenter(Screen1View&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterC1ER11Screen1View))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[4a0]"></a>Screen1Presenter::Screen1Presenter__sub_object(Screen1View&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterC1ER11Screen1View), UNUSED)

<P><STRONG><a name="[16f]"></a>Screen1Presenter::~Screen1Presenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[4a1]"></a>Screen1Presenter::~Screen1Presenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterD1Ev), UNUSED)

<P><STRONG><a name="[3d6]"></a>TypedTextDatabase::getInstanceSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[3d5]"></a>TypedTextDatabase::getFonts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase8getFontsEv))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[174]"></a>FrontendApplication::handleTickEvent()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FrontendApplication::handleTickEvent() &rArr; touchgfx::Application::handleTickEvent()
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::tick()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::handleTickEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
</UL>
<P><STRONG><a name="[344]"></a>FrontendApplication::FrontendApplication(Model&, FrontendHeap&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[4a2]"></a>FrontendApplication::FrontendApplication__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[179]"></a>HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned) &rArr; HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned) &rArr; JPEG_OutputHandler &rArr; HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::readData(unsigned, unsigned)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::getU32(unsigned)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::getU16(unsigned)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[35e]"></a>HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhjPhttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HardwareMJPEGDecoder::decodeMJPEGFrame(const unsigned char*, unsigned, unsigned char*, unsigned short, unsigned short, unsigned) &rArr; JPEG_OutputHandler &rArr; HAL_JPEG_Resume &rArr; JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_OutputHandler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Decode_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[17c]"></a>HardwareMJPEGDecoder::getNumberOfFrames()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder17getNumberOfFramesEv))
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[35c]"></a>HardwareMJPEGDecoder::getU16(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder6getU16Ej))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[35d]"></a>HardwareMJPEGDecoder::getU32(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder6getU32Ej))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::gotoFrame(unsigned)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[35b]"></a>HardwareMJPEGDecoder::readData(unsigned, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder8readDataEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareMJPEGDecoder::readData(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::gotoFrame(unsigned)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::decodeNextFrame(unsigned char*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[17a]"></a>HardwareMJPEGDecoder::gotoFrame(unsigned)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoder9gotoFrameEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardwareMJPEGDecoder::gotoFrame(unsigned) &rArr; HardwareMJPEGDecoder::readData(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::readData(unsigned, unsigned)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::getU32(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[35f]"></a>HardwareMJPEGDecoder::HardwareMJPEGDecoder()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HardwareMJPEGDecoder::HardwareMJPEGDecoder() &rArr; TGFX_JPEG_InitColorTables &rArr; TGFX_JPEG_Init_MCU_LUT
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_InitColorTables
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
</UL>

<P><STRONG><a name="[4a3]"></a>HardwareMJPEGDecoder::HardwareMJPEGDecoder__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, hardwaremjpegdecoder.o(i._ZN20HardwareMJPEGDecoderC1Ev), UNUSED)

<P><STRONG><a name="[bc]"></a>HardwareMJPEGDecoder::~HardwareMJPEGDecoder()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
<LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[4a4]"></a>HardwareMJPEGDecoder::~HardwareMJPEGDecoder__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20HardwareMJPEGDecoderD1Ev), UNUSED)

<P><STRONG><a name="[17e]"></a>STM32TouchController::sampleTouch(int&, int&)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stm32touchcontroller.o(i._ZN20STM32TouchController11sampleTouchERiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STM32TouchController::sampleTouch(int&, int&) &rArr; BSP_TS_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
</UL>
<P><STRONG><a name="[17d]"></a>STM32TouchController::init()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32touchcontroller.o(i._ZN20STM32TouchController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32TouchController::init() &rArr; BSP_TS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
</UL>
<P><STRONG><a name="[bf]"></a>STM32TouchController::~STM32TouchController()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
<LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
</UL>
<P><STRONG><a name="[4a5]"></a>STM32TouchController::~STM32TouchController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev), UNUSED)

<P><STRONG><a name="[102]"></a>TouchGFXGeneratedHAL::FlushCache()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10FlushCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchGFXGeneratedHAL::FlushCache() &rArr; SCB_CleanInvalidateDCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanInvalidateDCache()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[334]"></a>TouchGFXGeneratedHAL::initialize()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
</UL>

<P><STRONG><a name="[101]"></a>TouchGFXGeneratedHAL::InvalidateCache()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL15InvalidateCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchGFXGeneratedHAL::InvalidateCache() &rArr; SCB_CleanInvalidateDCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanInvalidateDCache()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[335]"></a>TouchGFXGeneratedHAL::enableInterrupts()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL16enableInterruptsEv))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::enableInterrupts()
</UL>

<P><STRONG><a name="[337]"></a>TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&) &rArr; SCB_CleanInvalidateDCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanInvalidateDCache()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[338]"></a>TouchGFXGeneratedHAL::disableInterrupts()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL17disableInterruptsEv))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::disableInterrupts()
</UL>

<P><STRONG><a name="[33a]"></a>TouchGFXGeneratedHAL::setTFTFrameBuffer(unsigned short*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::setTFTFrameBuffer(unsigned short*)
</UL>

<P><STRONG><a name="[33b]"></a>TouchGFXGeneratedHAL::configureInterrupts()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL19configureInterruptsEv))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::configureInterrupts()
</UL>

<P><STRONG><a name="[33c]"></a>TouchGFXGeneratedHAL::enableLCDControllerInterrupt()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::enableLCDControllerInterrupt()
</UL>

<P><STRONG><a name="[33d]"></a>TouchGFXGeneratedHAL::endFrame()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TouchGFXGeneratedHAL::endFrame() &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::endFrame()
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::endFrame()
</UL>

<P><STRONG><a name="[e7]"></a>TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned) &rArr; touchgfx::HAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[c2]"></a>ApplicationFontProvider::~ApplicationFontProvider()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
</UL>
<P><STRONG><a name="[4a6]"></a>ApplicationFontProvider::~ApplicationFontProvider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23ApplicationFontProviderD1Ev), UNUSED)

<P><STRONG><a name="[345]"></a>FrontendApplicationBase::gotoScreen1ScreenNoTransition()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[d2]"></a>FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Keyboard::Keyboard() &rArr; KeyboardBase::KeyboardBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[35a]"></a>FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[4a7]"></a>FrontendApplicationBase::FrontendApplicationBase__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[180]"></a>FrontendApplicationBase::~FrontendApplicationBase()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
</UL>
<P><STRONG><a name="[4a8]"></a>FrontendApplicationBase::~FrontendApplicationBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev), UNUSED)

<P><STRONG><a name="[be]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::~DedicatedBufferController()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj480ELj288ELj960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
<LI> touchgfxgeneratedhal.o(.constdata__ZTV25DedicatedBufferControllerILj1ELj480ELj288ELj960ELN8touchgfx6Bitmap12BitmapFormatE0EE)
</UL>
<P><STRONG><a name="[4a9]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::~DedicatedBufferController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN25DedicatedBufferControllerILj1ELj480ELj288ELj960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev), UNUSED)

<P><STRONG><a name="[359]"></a>Model::tick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model.o(i._ZN5Model4tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>

<P><STRONG><a name="[343]"></a>Model::Model()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, model.o(i._ZN5ModelC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[4aa]"></a>Model::Model__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, model.o(i._ZN5ModelC1Ev), UNUSED)

<P><STRONG><a name="[183]"></a>Keyboard::clrBtClick()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard10clrBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Keyboard::clrBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[182]"></a>Keyboard::escBtClick()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard10escBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Keyboard::escBtClick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1ae]"></a>Keyboard::fh1BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10fh1BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh1BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1af]"></a>Keyboard::fh2BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10fh2BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh2BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1b0]"></a>Keyboard::fh3BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10fh3BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh3BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1b1]"></a>Keyboard::fh4BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10fh4BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh4BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1b2]"></a>Keyboard::fh5BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10fh5BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh5BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1b3]"></a>Keyboard::fh6BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10fh6BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh6BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1b4]"></a>Keyboard::fh7BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10fh7BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh7BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1b5]"></a>Keyboard::fh8BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10fh8BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh8BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1b6]"></a>Keyboard::fh9BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10fh9BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh9BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[181]"></a>Keyboard::initialize()</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, keyboard.o(i._ZN8Keyboard10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::initialize() &rArr; touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText) &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::initialize()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pyClearInput()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::textArea1ClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1ad]"></a>Keyboard::nb0BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10nb0BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::nb0BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1a4]"></a>Keyboard::nb1BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10nb1BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::nb1BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1a5]"></a>Keyboard::nb2BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10nb2BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::nb2BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1a6]"></a>Keyboard::nb3BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10nb3BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::nb3BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1a7]"></a>Keyboard::nb4BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10nb4BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::nb4BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1a8]"></a>Keyboard::nb5BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10nb5BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::nb5BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1a9]"></a>Keyboard::nb6BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10nb6BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::nb6BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1aa]"></a>Keyboard::nb7BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10nb7BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::nb7BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1ab]"></a>Keyboard::nb8BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10nb8BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::nb8BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1ac]"></a>Keyboard::nb9BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10nb9BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::nb9BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[185]"></a>Keyboard::numBtClick()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard10numBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Keyboard::numBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1b7]"></a>Keyboard::fh10BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard11fh10BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh10BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1b8]"></a>Keyboard::fh11BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard11fh11BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh11BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1b9]"></a>Keyboard::fh12BtClick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard11fh12BtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fh12BtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1bf]"></a>Keyboard::cnBtABCClick()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard12cnBtABCClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::cnBtABCClick() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinToChinese(char*, unsigned char)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelecUpdata(unsigned char)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1c0]"></a>Keyboard::cnBtDEFClick()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard12cnBtDEFClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::cnBtDEFClick() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinToChinese(char*, unsigned char)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelecUpdata(unsigned char)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1d3]"></a>Keyboard::cnBtDelClick()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard12cnBtDelClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::cnBtDelClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1d2]"></a>Keyboard::cnBtEntClick()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard12cnBtEntClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Keyboard::cnBtEntClick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1c1]"></a>Keyboard::cnBtGHIClick()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard12cnBtGHIClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::cnBtGHIClick() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinToChinese(char*, unsigned char)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelecUpdata(unsigned char)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1c2]"></a>Keyboard::cnBtJKLClick()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard12cnBtJKLClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::cnBtJKLClick() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinToChinese(char*, unsigned char)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelecUpdata(unsigned char)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1c3]"></a>Keyboard::cnBtMNOClick()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard12cnBtMNOClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::cnBtMNOClick() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinToChinese(char*, unsigned char)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelecUpdata(unsigned char)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1c5]"></a>Keyboard::cnBtTUVClick()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard12cnBtTUVClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::cnBtTUVClick() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinToChinese(char*, unsigned char)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelecUpdata(unsigned char)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[184]"></a>Keyboard::cn_enBtClick()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, keyboard.o(i._ZN8Keyboard12cn_enBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Keyboard::cn_enBtClick() &rArr; touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText) &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1ba]"></a>Keyboard::fhDelBtClick()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard12fhDelBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fhDelBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1bb]"></a>Keyboard::fhEntBtClick()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard12fhEntBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Keyboard::fhEntBtClick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[32e]"></a>Keyboard::getInputText(unsigned short*, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, keyboard.o(i._ZN8Keyboard12getInputTextEPtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Keyboard::getInputText(unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::KeyboardNbEnterBtClickHandler(Keyboard&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::KeyboardEnEnterBtClickHandler(Keyboard&)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::KeyboardCnEnterBtClickHandler(Keyboard&)
</UL>

<P><STRONG><a name="[36a]"></a>Keyboard::pyClearInput()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard12pyClearInputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::pyClearInput() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelectBt5Click()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelectBt4Click()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelectBt3Click()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelectBt2Click()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelectBt1Click()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::initialize()
</UL>

<P><STRONG><a name="[1d1]"></a>Keyboard::cnBtBackClick()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard13cnBtBackClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Keyboard::cnBtBackClick() &rArr; PinyinToChinese(char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinToChinese(char*, unsigned char)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1bc]"></a>Keyboard::cnBtLiftClick()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, keyboard.o(i._ZN8Keyboard13cnBtLiftClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Keyboard::cnBtLiftClick() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1be]"></a>Keyboard::cnBtNoneClick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboard.o(i._ZN8Keyboard13cnBtNoneClickEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1c4]"></a>Keyboard::cnBtPQRSClick()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard13cnBtPQRSClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::cnBtPQRSClick() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinToChinese(char*, unsigned char)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelecUpdata(unsigned char)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1c6]"></a>Keyboard::cnBtWXYZClick()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard13cnBtWXYZClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::cnBtWXYZClick() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinToChinese(char*, unsigned char)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelecUpdata(unsigned char)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[36e]"></a>Keyboard::cnSelecUpdata(unsigned char)</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, keyboard.o(i._ZN8Keyboard13cnSelecUpdataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelectBt5Click()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelectBt4Click()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelectBt3Click()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelectBt2Click()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelectBt1Click()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtRightClick()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtWXYZClick()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtPQRSClick()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtLiftClick()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtTUVClick()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtMNOClick()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtJKLClick()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtGHIClick()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtDEFClick()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtABCClick()
</UL>

<P><STRONG><a name="[1a3]"></a>Keyboard::en_delBtClick()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard13en_delBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::en_delBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1a2]"></a>Keyboard::en_entBtClick()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard13en_entBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Keyboard::en_entBtClick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[36d]"></a>Keyboard::pySelecUpdata(unsigned char)</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard13pySelecUpdataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Keyboard::pySelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtWXYZClick()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtPQRSClick()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtBackClick()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtTUVClick()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtMNOClick()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtJKLClick()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtGHIClick()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtDEFClick()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtABCClick()
</UL>

<P><STRONG><a name="[1bd]"></a>Keyboard::cnBtRightClick()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, keyboard.o(i._ZN8Keyboard14cnBtRightClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Keyboard::cnBtRightClick() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1cc]"></a>Keyboard::cnSelectBt1Click()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard16cnSelectBt1ClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Keyboard::cnSelectBt1Click() &rArr; Keyboard::pyClearInput() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pyClearInput()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1cd]"></a>Keyboard::cnSelectBt2Click()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard16cnSelectBt2ClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Keyboard::cnSelectBt2Click() &rArr; Keyboard::pyClearInput() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pyClearInput()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1ce]"></a>Keyboard::cnSelectBt3Click()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard16cnSelectBt3ClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Keyboard::cnSelectBt3Click() &rArr; Keyboard::pyClearInput() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pyClearInput()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1cf]"></a>Keyboard::cnSelectBt4Click()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard16cnSelectBt4ClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Keyboard::cnSelectBt4Click() &rArr; Keyboard::pyClearInput() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pyClearInput()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1d0]"></a>Keyboard::cnSelectBt5Click()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard16cnSelectBt5ClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Keyboard::cnSelectBt5Click() &rArr; Keyboard::pyClearInput() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pyClearInput()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1c7]"></a>Keyboard::pySelectBt1Click()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard16pySelectBt1ClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::pySelectBt1Click() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1c8]"></a>Keyboard::pySelectBt2Click()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard16pySelectBt2ClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::pySelectBt2Click() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1c9]"></a>Keyboard::pySelectBt3Click()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard16pySelectBt3ClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::pySelectBt3Click() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1ca]"></a>Keyboard::pySelectBt4Click()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard16pySelectBt4ClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::pySelectBt4Click() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1cb]"></a>Keyboard::pySelectBt5Click()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, keyboard.o(i._ZN8Keyboard16pySelectBt5ClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard::pySelectBt5Click() &rArr; Keyboard::cnSelecUpdata(unsigned char) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinyinPageUpdata(unsigned short)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[329]"></a>Keyboard::setescBtCallback(touchgfx::GenericCallback&lang;Keyboard&, void, void&rang;&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, keyboard.o(i._ZN8Keyboard16setescBtCallbackERN8touchgfx15GenericCallbackIRS_vvEE))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
</UL>

<P><STRONG><a name="[32c]"></a>Keyboard::setcn_entBtrCallback(touchgfx::GenericCallback&lang;Keyboard&, void, void&rang;&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, keyboard.o(i._ZN8Keyboard20setcn_entBtrCallbackERN8touchgfx15GenericCallbackIRS_vvEE))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
</UL>

<P><STRONG><a name="[32a]"></a>Keyboard::seten_entBtrCallback(touchgfx::GenericCallback&lang;Keyboard&, void, void&rang;&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, keyboard.o(i._ZN8Keyboard20seten_entBtrCallbackERN8touchgfx15GenericCallbackIRS_vvEE))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
</UL>

<P><STRONG><a name="[32b]"></a>Keyboard::setnb_entBtrCallback(touchgfx::GenericCallback&lang;Keyboard&, void, void&rang;&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, keyboard.o(i._ZN8Keyboard20setnb_entBtrCallbackERN8touchgfx15GenericCallbackIRS_vvEE))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
</UL>

<P><STRONG><a name="[18e]"></a>Keyboard::aBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8aBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::aBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[19a]"></a>Keyboard::bBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8bBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::bBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[198]"></a>Keyboard::cBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8cBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::cBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[190]"></a>Keyboard::dBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8dBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::dBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[188]"></a>Keyboard::eBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8eBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::eBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[191]"></a>Keyboard::fBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8fBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::fBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[192]"></a>Keyboard::gBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8gBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::gBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[193]"></a>Keyboard::hBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8hBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::hBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[18d]"></a>Keyboard::iBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8iBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::iBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[194]"></a>Keyboard::jBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8jBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::jBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[195]"></a>Keyboard::kBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8kBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::kBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1a0]"></a>Keyboard::lBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8lBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::lBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[19c]"></a>Keyboard::mBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8mBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::mBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[19b]"></a>Keyboard::nBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8nBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::nBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[19d]"></a>Keyboard::oBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8oBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::oBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[19f]"></a>Keyboard::pBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8pBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::pBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[186]"></a>Keyboard::qBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8qBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::qBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[189]"></a>Keyboard::rBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8rBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::rBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[18f]"></a>Keyboard::sBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8sBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::sBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[18a]"></a>Keyboard::tBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8tBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::tBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[18c]"></a>Keyboard::uBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8uBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::uBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[199]"></a>Keyboard::vBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8vBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::vBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[187]"></a>Keyboard::wBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8wBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::wBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[197]"></a>Keyboard::xBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8xBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::xBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[18b]"></a>Keyboard::yBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8yBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::yBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[196]"></a>Keyboard::zBtClick()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard8zBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::zBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[1a1]"></a>Keyboard::blBtClick()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard9blBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Keyboard::blBtClick() &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[19e]"></a>Keyboard::dxBtClick()</STRONG> (Thumb, 1050 bytes, Stack size 128 bytes, keyboard.o(i._ZN8Keyboard9dxBtClickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Keyboard::dxBtClick() &rArr; touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText) &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
</UL>
<P><STRONG><a name="[331]"></a>Keyboard::Keyboard()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, keyboard.o(i._ZN8KeyboardC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Keyboard::Keyboard() &rArr; KeyboardBase::KeyboardBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
</UL>

<P><STRONG><a name="[4ab]"></a>Keyboard::Keyboard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, keyboard.o(i._ZN8KeyboardC1Ev), UNUSED)

<P><STRONG><a name="[1d7]"></a>STM32DMA::initialize()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMA10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32DMA::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1d4]"></a>STM32DMA::getBlitCaps()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMA11getBlitCapsEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1dd]"></a>STM32DMA::setupDataCopy(const touchgfx::BlitOp&)</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stm32dma.o(i._ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32DMA::setupDataCopy(const touchgfx::BlitOp&) &rArr; STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1de]"></a>STM32DMA::setupDataFill(const touchgfx::BlitOp&)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32dma.o(i._ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STM32DMA::setupDataFill(const touchgfx::BlitOp&) &rArr; STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1d9]"></a>STM32DMA::signalDMAInterrupt()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMA18signalDMAInterruptEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[36f]"></a>STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[370]"></a>STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[371]"></a>STM32DMA::STM32DMA()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMAC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32DMA::STM32DMA() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[4ac]"></a>STM32DMA::STM32DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stm32dma.o(i._ZN8STM32DMAC1Ev), UNUSED)

<P><STRONG><a name="[c0]"></a>STM32DMA::~STM32DMA()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[4ad]"></a>STM32DMA::~STM32DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8STM32DMAD1Ev), UNUSED)

<P><STRONG><a name="[3dc]"></a>touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, screen.o(i._ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[4ae]"></a>touchgfx::ClickEvent::ClickEvent__sub_object(touchgfx::ClickEvent::ClickEventType, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, screen.o(i._ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss), UNUSED)

<P><STRONG><a name="[1e2]"></a>touchgfx::KeySampler::init()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, keysampler.o(i._ZN8touchgfx10KeySampler4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::KeySampler::init() &rArr; touchgfx::Buttons::init() &rArr; BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Buttons::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_TouchGFXHAL_cpp_c3b64dc6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
</UL>
<P><STRONG><a name="[1e3]"></a>touchgfx::KeySampler::sample(unsigned char&)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, keysampler.o(i._ZN8touchgfx10KeySampler6sampleERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::KeySampler::sample(unsigned char&) &rArr; touchgfx::Buttons::sample()
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Buttons::sample()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
</UL>
<P><STRONG><a name="[bb]"></a>touchgfx::KeySampler::~KeySampler()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keysampler.o(i._ZN8touchgfx10KeySamplerD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> keysampler.o(.constdata__ZTVN8touchgfx10KeySamplerE)
<LI> touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6)
</UL>
<P><STRONG><a name="[4af]"></a>touchgfx::KeySampler::~KeySampler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keysampler.o(i._ZN8touchgfx10KeySamplerD1Ev), UNUSED)

<P><STRONG><a name="[376]"></a>touchgfx::OSWrappers::initialize()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
</UL>

<P><STRONG><a name="[282]"></a>touchgfx::OSWrappers::signalVSync()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers11signalVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::OSWrappers::signalVSync() &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
</UL>

<P><STRONG><a name="[33e]"></a>touchgfx::OSWrappers::waitForVSync()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers12waitForVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::taskEntry()
</UL>

<P><STRONG><a name="[37b]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphore()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::unlockFrameBuffer()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
</UL>

<P><STRONG><a name="[37c]"></a>touchgfx::OSWrappers::takeFrameBufferSemaphore()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
</UL>

<P><STRONG><a name="[37e]"></a>touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[37f]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::executeCompleted()
</UL>

<P><STRONG><a name="[1e9]"></a>touchgfx::Transition::invalidate()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Transition::invalidate()
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[1ea]"></a>touchgfx::Transition::setScreenContainer(touchgfx::Container&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[1e8]"></a>touchgfx::Transition::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[1e7]"></a>touchgfx::Transition::tearDown()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[363]"></a>touchgfx::Application::getInstance()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Transition::invalidate()
</UL>

<P><STRONG><a name="[173]"></a>touchgfx::Application::handleKeyEvent(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application14handleKeyEventEh))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[380]"></a>touchgfx::Application::invalidateArea(touchgfx::Rect)</STRONG> (Thumb, 1538 bytes, Stack size 64 bytes, application.o(i._ZN8touchgfx11Application14invalidateAreaENS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
</UL>

<P><STRONG><a name="[171]"></a>touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[17f]"></a>touchgfx::Application::handleTickEvent()</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11Application15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Application::handleTickEvent()
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[170]"></a>touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[172]"></a>touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[178]"></a>touchgfx::Application::cacheDrawOperations(bool)</STRONG> (Thumb, 1210 bytes, Stack size 136 bytes, application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = touchgfx::Application::cacheDrawOperations(bool) &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformFrameBufferToDisplay(touchgfx::Rect&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[390]"></a>touchgfx::Application::clearAllTimerWidgets()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application20clearAllTimerWidgetsEv))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[1e4]"></a>touchgfx::Application::handlePendingScreenTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv))
<BR>[Address Reference Count : 1]<UL><LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[177]"></a>touchgfx::Application::draw(touchgfx::Rect&)</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, application.o(i._ZN8touchgfx11Application4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::Application::draw(touchgfx::Rect&) &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[176]"></a>touchgfx::Application::draw()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11Application4drawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Application::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[367]"></a>touchgfx::Application::Application()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Application::Application() &rArr; touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::clearAllTimerWidgets()
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[4b0]"></a>touchgfx::Application::Application__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev), UNUSED)

<P><STRONG><a name="[46b]"></a>touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fontmanager.o(i._ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[3ee]"></a>touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, gestures.o(i._ZN8touchgfx12GestureEventC1ENS0_16GestureEventTypeEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[4b1]"></a>touchgfx::GestureEvent::GestureEvent__sub_object(touchgfx::GestureEvent::GestureEventType, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, gestures.o(i._ZN8touchgfx12GestureEventC1ENS0_16GestureEventTypeEsss), UNUSED)

<P><STRONG><a name="[1e6]"></a>touchgfx::NoTransition::handleTickEvent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[1e5]"></a>touchgfx::NoTransition::~NoTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[4b2]"></a>touchgfx::NoTransition::~NoTransition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev), UNUSED)

<P><STRONG><a name="[391]"></a>touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, textprovider.o(i._ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[393]"></a>touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider11adjustGlyphEttRPKNS_9GlyphNodeEPKNS_4FontE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*) &rArr; touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*) &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustHindiGlyph(const touchgfx::GlyphNode*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&)
</UL>

<P><STRONG><a name="[398]"></a>touchgfx::TextProvider::getNextChar()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider11getNextCharEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>

<P><STRONG><a name="[39a]"></a>touchgfx::TextProvider::gsubRuleMatch(const unsigned short*, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, textprovider.o(i._ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextProvider::gsubRuleMatch(const unsigned short*, unsigned short, unsigned short, unsigned short) &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[39c]"></a>touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, textprovider.o(i._ZN8touchgfx12TextProvider14applyGsubRulesEPKtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::gsubRuleMatch(const unsigned short*, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::substituteGlyphs()
</UL>

<P><STRONG><a name="[395]"></a>touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, textprovider.o(i._ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*) &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::top() const
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::thaiLookupGlyph(const touchgfx::GlyphNode*, const touchgfx::Font*, unsigned short) const
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::setTop(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>

<P><STRONG><a name="[399]"></a>touchgfx::TextProvider::fillInputBuffer()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider15fillInputBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::isFull() const
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*)
</UL>

<P><STRONG><a name="[3a6]"></a>touchgfx::TextProvider::getNextLigature(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, texts.o(i._ZN8touchgfx12TextProvider15getNextLigatureEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::substituteGlyphs()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
</UL>

<P><STRONG><a name="[3a8]"></a>touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, textprovider.o(i._ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
</UL>

<P><STRONG><a name="[3a9]"></a>touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, textprovider.o(i._ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
</UL>

<P><STRONG><a name="[396]"></a>touchgfx::TextProvider::adjustHindiGlyph(const touchgfx::GlyphNode*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TextProvider::adjustHindiGlyph(const touchgfx::GlyphNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>

<P><STRONG><a name="[3a7]"></a>touchgfx::TextProvider::substituteGlyphs()</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, textprovider.o(i._ZN8touchgfx12TextProvider16substituteGlyphsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::gsubTableBinarySearch(unsigned short, const unsigned short*, unsigned short) const
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
</UL>

<P><STRONG><a name="[394]"></a>touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)</STRONG> (Thumb, 590 bytes, Stack size 32 bytes, textprovider.o(i._ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::top() const
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::width() const
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::setTop(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>

<P><STRONG><a name="[392]"></a>touchgfx::TextProvider::initializeInternal()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, texts.o(i._ZN8touchgfx12TextProvider18initializeInternalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
</UL>

<P><STRONG><a name="[3a5]"></a>touchgfx::TextProvider::getNextCharInternal()</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, textprovider.o(i._ZN8touchgfx12TextProvider19getNextCharInternalEv))
<BR><BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextCharInternal()
</UL>

<P><STRONG><a name="[39d]"></a>touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*)</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, textprovider.o(i._ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::dropFront(unsigned short)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[3ad]"></a>touchgfx::TextProvider::TextProvider()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProviderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextProvider::TextProvider() &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[4b3]"></a>touchgfx::TextProvider::TextProvider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProviderC1Ev), UNUSED)

<P><STRONG><a name="[1d5]"></a>touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&) &rArr; touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1df]"></a>touchgfx::DMA_Interface::enableAlpha(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1e0]"></a>touchgfx::DMA_Interface::disableAlpha()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1dc]"></a>touchgfx::DMA_Interface::seedExecution()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[3bb]"></a>touchgfx::DMA_Interface::isDmaQueueEmpty()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
</UL>

<P><STRONG><a name="[1db]"></a>touchgfx::DMA_Interface::executeCompleted()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::DMA_Interface::executeCompleted() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1e1]"></a>touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::DMA_Interface::waitForFrameBufferSemaphore() &rArr; touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1d6]"></a>touchgfx::DMA_Interface::flush()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx13DMA_Interface5flushEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1d8]"></a>touchgfx::DMA_Interface::start()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DMA_Interface::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[1da]"></a>touchgfx::DMA_Interface::execute()</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::DMA_Interface::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV8STM32DMA)
</UL>
<P><STRONG><a name="[322]"></a>touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_28_4bpp()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_40_4bpp()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_30_4bpp()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_28_4bpp()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_32_4bpp()
</UL>

<P><STRONG><a name="[4b4]"></a>touchgfx::GeneratedFont::GeneratedFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE), UNUSED)

<P><STRONG><a name="[9b]"></a>touchgfx::GeneratedFont::~GeneratedFont()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev))
<BR>[Address Reference Count : 8]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv)
<LI> table_verdana_28_4bpp.o(i._Z23getFont_verdana_28_4bppv)
<LI> table_verdana_40_4bpp.o(i._Z23getFont_verdana_40_4bppv)
<LI> table_microsoftyahei_bold_28_4bpp.o(i._Z35getFont_MicrosoftYaHei_Bold_28_4bppv)
<LI> table_microsoftyahei_bold_30_4bpp.o(i._Z35getFont_MicrosoftYaHei_Bold_30_4bppv)
<LI> table_microsoftyahei_bold_40_4bpp.o(i._Z35getFont_MicrosoftYaHei_Bold_40_4bppv)
<LI> table_microsoftyahei_32_4bpp.o(i._Z30getFont_MicrosoftYaHei_32_4bppv)
</UL>
<P><STRONG><a name="[4b5]"></a>touchgfx::GeneratedFont::~GeneratedFont__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev), UNUSED)

<P><STRONG><a name="[207]"></a>touchgfx::AbstractButton::executeAction()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, button.o(i._ZN8touchgfx14AbstractButton13executeActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::AbstractButton::executeAction()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[206]"></a>touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[175]"></a>touchgfx::MVPApplication::handlePendingScreenTransition()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::MVPApplication::handlePendingScreenTransition()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> touchgfxconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
</UL>
<P><STRONG><a name="[351]"></a>touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, keyboardbase.o(i._ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText) &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::dxBtClick()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cn_enBtClick()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::initialize()
</UL>

<P><STRONG><a name="[34a]"></a>touchgfx::ButtonWithLabel::ButtonWithLabel()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, buttonwithlabel.o(i._ZN8touchgfx15ButtonWithLabelC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::ButtonWithLabel::ButtonWithLabel() &rArr; touchgfx::Button::Button() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
</UL>

<P><STRONG><a name="[4b6]"></a>touchgfx::ButtonWithLabel::ButtonWithLabel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, buttonwithlabel.o(i._ZN8touchgfx15ButtonWithLabelC1Ev), UNUSED)

<P><STRONG><a name="[203]"></a>touchgfx::ButtonWithLabel::~ButtonWithLabel()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx15ButtonWithLabelD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::~KeyboardBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[4b7]"></a>touchgfx::ButtonWithLabel::~ButtonWithLabel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx15ButtonWithLabelD1Ev), UNUSED)

<P><STRONG><a name="[3b1]"></a>touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::TouchCalibration::translatePoint(touchgfx::Point&) &rArr; touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[3b3]"></a>touchgfx::TouchCalibration::clzu(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration4clzuEj))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>

<P><STRONG><a name="[3b2]"></a>touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)</STRONG> (Thumb, 154 bytes, Stack size 44 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration6muldivEiiiiRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::clzu(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>

<P><STRONG><a name="[3b4]"></a>touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</STRONG> (Thumb, 204 bytes, Stack size 52 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration7muldivuEjjjjjRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::clzu(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>

<P><STRONG><a name="[342]"></a>touchgfx::AbstractPartition::AbstractPartition__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[4b8]"></a>touchgfx::AbstractPartition::~AbstractPartition()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev), UNUSED)

<P><STRONG><a name="[209]"></a>touchgfx::AbstractPartition::~AbstractPartition__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
</UL>
<P><STRONG><a name="[20d]"></a>touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[20e]"></a>touchgfx::LockFreeDMA_Queue::pop()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[20f]"></a>touchgfx::LockFreeDMA_Queue::first()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[20c]"></a>touchgfx::LockFreeDMA_Queue::isFull()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[20b]"></a>touchgfx::LockFreeDMA_Queue::isEmpty()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[372]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::STM32DMA()
</UL>

<P><STRONG><a name="[4b9]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue__sub_object(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm), UNUSED)

<P><STRONG><a name="[214]"></a>touchgfx::MCUInstrumentation::getCCConsumed()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv))
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[215]"></a>touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj))
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[38d]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[3b5]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[418]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[3b6]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[38b]"></a>touchgfx::DisplayTransformation::transformFrameBufferToDisplay(touchgfx::Rect&)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformFrameBufferToDisplay(touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
</UL>

<P><STRONG><a name="[3bf]"></a>touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[1f0]"></a>touchgfx::TextAreaWithOneWildcard::getTextHeight()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::getTextHeight() &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[349]"></a>touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, keyboardbase.o(i._ZN8touchgfx23TextAreaWithOneWildcardC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
</UL>

<P><STRONG><a name="[4ba]"></a>touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, keyboardbase.o(i._ZN8touchgfx23TextAreaWithOneWildcardC1Ev), UNUSED)

<P><STRONG><a name="[210]"></a>touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx23TextAreaWithOneWildcardD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::~KeyboardBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[4bb]"></a>touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx23TextAreaWithOneWildcardD1Ev), UNUSED)

<P><STRONG><a name="[212]"></a>touchgfx::CortexMMCUInstrumentation::getCPUCycles()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv))
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[213]"></a>touchgfx::CortexMMCUInstrumentation::setMCUActive(bool)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CortexMMCUInstrumentation::setMCUActive(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[211]"></a>touchgfx::CortexMMCUInstrumentation::init()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentation4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CortexMMCUInstrumentation::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
</UL>
<P><STRONG><a name="[ba]"></a>touchgfx::CortexMMCUInstrumentation::~CortexMMCUInstrumentation()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentationD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> cortexmmcuinstrumentation.o(.constdata__ZTVN8touchgfx25CortexMMCUInstrumentationE)
<LI> touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6)
</UL>
<P><STRONG><a name="[4bc]"></a>touchgfx::CortexMMCUInstrumentation::~CortexMMCUInstrumentation__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cortexmmcuinstrumentation.o(i._ZN8touchgfx25CortexMMCUInstrumentationD1Ev), UNUSED)

<P><STRONG><a name="[21f]"></a>touchgfx::HAL::FlushCache()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL10FlushCacheEv))
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[21c]"></a>touchgfx::HAL::beginFrame()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL10beginFrameEv))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::beginFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[218]"></a>touchgfx::HAL::initialize()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[e8]"></a>touchgfx::HAL::getBlitCaps()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL11getBlitCapsEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[2df]"></a>touchgfx::HAL::setMCUActive(bool)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL12setMCUActiveEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::setMCUActive(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTaskHook
</UL>

<P><STRONG><a name="[ed]"></a>touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[21e]"></a>touchgfx::HAL::InvalidateCache()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL15InvalidateCacheEv))
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[f1]"></a>touchgfx::HAL::backPorchExited()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL15backPorchExitedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::HAL::backPorchExited() &rArr; touchgfx::HAL::swapFrameBuffers() &rArr; touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[e4]"></a>touchgfx::HAL::lockFrameBuffer()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::HAL::lockFrameBuffer() &rArr; touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::isDmaQueueEmpty()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[ec]"></a>touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</STRONG> (Thumb, 72 bytes, Stack size 96 bytes, hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[219]"></a>touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[283]"></a>touchgfx::HAL::swapFrameBuffers()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL16swapFrameBuffersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::swapFrameBuffers() &rArr; touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::backPorchExited()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
</UL>

<P><STRONG><a name="[e2]"></a>touchgfx::HAL::allowDMATransfers()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[f9]"></a>touchgfx::HAL::getTFTCurrentLine()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[e5]"></a>touchgfx::HAL::unlockFrameBuffer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::unlockFrameBuffer() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[3ae]"></a>touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hal.o(i._ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[3b8]"></a>touchgfx::HAL::getClientFrameBuffer()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL20getClientFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)
</UL>

<P><STRONG><a name="[f0]"></a>touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[de]"></a>touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[f7]"></a>touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[21b]"></a>touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[100]"></a>touchgfx::HAL::performDisplayOrientationChange()</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::HAL::performDisplayOrientationChange()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[3ba]"></a>touchgfx::HAL::lcd()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx3HAL3lcdEv))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
</UL>

<P><STRONG><a name="[fa]"></a>touchgfx::HAL::tick()</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, hal.o(i._ZN8touchgfx3HAL4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::HAL::tick()
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::tick()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[fe]"></a>touchgfx::HAL::touch(int, int)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, hal.o(i._ZN8touchgfx3HAL5touchEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = touchgfx::HAL::touch(int, int) &rArr; touchgfx::TouchCalibration::translatePoint(touchgfx::Point&) &rArr; touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[ff]"></a>touchgfx::HAL::noTouch()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL7noTouchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::HAL::noTouch() &rArr; touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[e9]"></a>touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</STRONG> (Thumb, 192 bytes, Stack size 96 bytes, hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[eb]"></a>touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)</STRONG> (Thumb, 72 bytes, Stack size 96 bytes, hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[ea]"></a>touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</STRONG> (Thumb, 56 bytes, Stack size 80 bytes, hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[ef]"></a>touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[ee]"></a>touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</STRONG> (Thumb, 142 bytes, Stack size 96 bytes, hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[21d]"></a>touchgfx::HAL::endFrame()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::endFrame()
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::endFrame()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[e3]"></a>touchgfx::HAL::flushDMA()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL8flushDMAEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[21a]"></a>touchgfx::HAL::blockCopy(void*, const void*, unsigned)</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[f8]"></a>touchgfx::HAL::taskDelay(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN8touchgfx3HAL9taskDelayEt))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[340]"></a>touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, touchgfxhal.o(i._ZN8touchgfx3HALC2ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[3c3]"></a>touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...)</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, texts.o(i._ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...) &rArr; touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[3c5]"></a>touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lcd.o(i._ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation) &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[3c6]"></a>touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, lcd.o(i._ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[3c9]"></a>touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, lcd.o(i._ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::isInvisibleZeroWidth(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[420]"></a>touchgfx::LCD::StringVisuals::StringVisuals(const touchgfx::Font*, touchgfx::colortype, unsigned char, unsigned char, short, touchgfx::TextRotation, unsigned char, unsigned char, touchgfx::WideTextAction)</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, textareawithwildcard.o(i._ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhsNS_12TextRotationEhhNS_14WideTextActionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::LCD::StringVisuals::StringVisuals(const touchgfx::Font*, touchgfx::colortype, unsigned char, unsigned char, short, touchgfx::TextRotation, unsigned char, unsigned char, touchgfx::WideTextAction)
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[4bd]"></a>touchgfx::LCD::StringVisuals::StringVisuals__sub_object(const touchgfx::Font*, touchgfx::colortype, unsigned char, unsigned char, short, touchgfx::TextRotation, unsigned char, unsigned char, touchgfx::WideTextAction)</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, textareawithwildcard.o(i._ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhsNS_12TextRotationEhhNS_14WideTextActionE), UNUSED)

<P><STRONG><a name="[3c4]"></a>touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)</STRONG> (Thumb, 598 bytes, Stack size 432 bytes, lcd.o(i._ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
</UL>

<P><STRONG><a name="[3cb]"></a>touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)</STRONG> (Thumb, 570 bytes, Stack size 136 bytes, lcd.o(i._ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::isInvisibleZeroWidth(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[3c8]"></a>touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::isInvisibleZeroWidth(unsigned short)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::isSpace(unsigned short)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>

<P><STRONG><a name="[3cd]"></a>touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
</UL>

<P><STRONG><a name="[3cc]"></a>touchgfx::LCD::WideTextInternalStruct::isSpace(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStruct7isSpaceEt))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
</UL>

<P><STRONG><a name="[3c7]"></a>touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>

<P><STRONG><a name="[4be]"></a>touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct__sub_object(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE), UNUSED)

<P><STRONG><a name="[3ce]"></a>touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[3cf]"></a>touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[3f6]"></a>touchgfx::LCD::div255(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx3LCD6div255Et))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[3ca]"></a>touchgfx::Font::isInvisibleZeroWidth(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(i._ZN8touchgfx4Font20isInvisibleZeroWidthEt))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
</UL>

<P><STRONG><a name="[3d0]"></a>touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO3getENS0_7GPIO_IDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::init()
</UL>

<P><STRONG><a name="[281]"></a>touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO3setENS0_7GPIO_IDE))
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
</UL>

<P><STRONG><a name="[333]"></a>touchgfx::GPIO::init()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::GPIO::init() &rArr; touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::get(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
</UL>

<P><STRONG><a name="[27a]"></a>touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE))
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setMCUActive(bool)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_EndOfRefreshCallback
</UL>

<P><STRONG><a name="[3bc]"></a>touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE))
<BR><BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
</UL>

<P><STRONG><a name="[388]"></a>touchgfx::Rect::expandToFit(const touchgfx::Rect&)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, application.o(i._ZN8touchgfx4Rect11expandToFitERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[389]"></a>touchgfx::Rect::Rect(short, short, short, short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx4RectC1Essss))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_Application_cpp_63cd8d44
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedVisibleRect()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[4bf]"></a>touchgfx::Rect::Rect__sub_object(short, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx4RectC1Essss), UNUSED)

<P><STRONG><a name="[cc]"></a>touchgfx::Rect::Rect()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN8touchgfx4RectC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev)
</UL>
<P><STRONG><a name="[4c0]"></a>touchgfx::Rect::Rect__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN8touchgfx4RectC1Ev), UNUSED)

<P><STRONG><a name="[3d2]"></a>touchgfx::Rect::operator &=(const touchgfx::Rect&)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx4RectaNERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[358]"></a>touchgfx::View&lang;Screen1Presenter&rang;::~View()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx4ViewI16Screen1PresenterED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>

<P><STRONG><a name="[4c1]"></a>touchgfx::View&lang;Screen1Presenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx4ViewI16Screen1PresenterED1Ev), UNUSED)

<P><STRONG><a name="[34e]"></a>touchgfx::Color::getColorFromRGB(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN8touchgfx5Color15getColorFromRGBEhhh))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
</UL>

<P><STRONG><a name="[3f3]"></a>touchgfx::Color::getRedFromRGB565(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx5Color16getRedFromRGB565Et))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[3f5]"></a>touchgfx::Color::getBlueFromRGB565(unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx5Color17getBlueFromRGB565Et))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[3f4]"></a>touchgfx::Color::getGreenFromRGB565(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx5Color18getGreenFromRGB565Et))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[225]"></a>touchgfx::Image::setBitmap(const touchgfx::Bitmap&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, image.o(i._ZN8touchgfx5Image9setBitmapERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[348]"></a>touchgfx::Image::Image(const touchgfx::Bitmap&)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, keyboardbase.o(i._ZN8touchgfx5ImageC1ERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Image::Image(const touchgfx::Bitmap&) &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
</UL>

<P><STRONG><a name="[4c2]"></a>touchgfx::Image::Image__sub_object(const touchgfx::Bitmap&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, keyboardbase.o(i._ZN8touchgfx5ImageC1ERKNS_6BitmapE), UNUSED)

<P><STRONG><a name="[368]"></a>touchgfx::Texts::setLanguage(unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, texts.o(i._ZN8touchgfx5Texts11setLanguageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Texts::setLanguage(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getFonts()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getInstanceSize()
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[3d9]"></a>touchgfx::Bitmap::clearCache()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bitmap.o(i._ZN8touchgfx6Bitmap10clearCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Bitmap::clearCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[3d7]"></a>touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bitmap.o(i._ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::clearCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[3d8]"></a>touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bitmap.o(i._ZN8touchgfx6Bitmap8setCacheEPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::clearCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::clearCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[9d]"></a>touchgfx::BlitOp::BlitOp()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(i._ZN8STM32DMAC1Ev)
</UL>
<P><STRONG><a name="[4c3]"></a>touchgfx::BlitOp::BlitOp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev), UNUSED)

<P><STRONG><a name="[208]"></a>touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[34b]"></a>touchgfx::Button::Button()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, keyboardbase.o(i._ZN8touchgfx6ButtonC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Button::Button() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::ButtonWithLabel()
</UL>

<P><STRONG><a name="[4c4]"></a>touchgfx::Button::Button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, keyboardbase.o(i._ZN8touchgfx6ButtonC1Ev), UNUSED)

<P><STRONG><a name="[228]"></a>touchgfx::Screen::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen11setupScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[484]"></a>touchgfx::Screen::bindTransition(touchgfx::Transition&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[dd]"></a>touchgfx::Screen::handleKeyEvent(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh))
<BR>[Address Reference Count : 3]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[16c]"></a>touchgfx::Screen::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv))
<BR>[Address Reference Count : 2]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[d7]"></a>touchgfx::Screen::afterTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv))
<BR>[Address Reference Count : 3]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[da]"></a>touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[dc]"></a>touchgfx::Screen::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx6Screen15handleTickEventEv))
<BR>[Address Reference Count : 3]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[d9]"></a>touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[db]"></a>touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[357]"></a>touchgfx::Screen::add(touchgfx::Drawable&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx6Screen3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Screen::add(touchgfx::Drawable&) &rArr; touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[d5]"></a>touchgfx::Screen::draw(touchgfx::Rect&)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::Screen::draw(touchgfx::Rect&) &rArr; touchgfx::Screen::startSMOC(const touchgfx::Rect&) &rArr; touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[38f]"></a>touchgfx::Screen::draw()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6Screen4drawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[3de]"></a>touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</STRONG> (Thumb, 532 bytes, Stack size 72 bytes, screen.o(i._ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedVisibleRect()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsY()
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsX()
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[32d]"></a>touchgfx::Screen::remove(touchgfx::Drawable&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx6Screen6removeERNS_8DrawableE))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::remove(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::KeyboardNbEnterBtClickHandler(Keyboard&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::KeyboardEnEnterBtClickHandler(Keyboard&)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::KeyboardCnEnterBtClickHandler(Keyboard&)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::KeyboardEscBtClickHandler(Keyboard&)
</UL>

<P><STRONG><a name="[3dd]"></a>touchgfx::Screen::startSMOC(const touchgfx::Rect&)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, screen.o(i._ZN8touchgfx6Screen9startSMOCERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::Screen::startSMOC(const touchgfx::Rect&) &rArr; touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>

<P><STRONG><a name="[354]"></a>touchgfx::Screen::Screen()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Screen::Screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[4c5]"></a>touchgfx::Screen::Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev), UNUSED)

<P><STRONG><a name="[227]"></a>touchgfx::Screen::~Screen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[4c6]"></a>touchgfx::Screen::~Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev), UNUSED)

<P><STRONG><a name="[1ed]"></a>touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE))
<BR>[Address Reference Count : 8]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[355]"></a>touchgfx::Widget::Widget__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, keyboardbase.o(i._ZN8touchgfx6WidgetC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
</UL>

<P><STRONG><a name="[374]"></a>touchgfx::Buttons::init()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buttons.o(i._ZN8touchgfx7Buttons4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::Buttons::init() &rArr; BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::KeySampler::init()
</UL>

<P><STRONG><a name="[375]"></a>touchgfx::Buttons::sample()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, buttons.o(i._ZN8touchgfx7Buttons6sampleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Buttons::sample()
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::KeySampler::sample(unsigned char&)
</UL>

<P><STRONG><a name="[3e3]"></a>touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, unsigned short, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)</STRONG> (Thumb, 368 bytes, Stack size 52 bytes, unicode.o(i._ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, unsigned short, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strlen(const unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[3e5]"></a>touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, const char*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, unicode.o(i._ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, const char*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::peekChar(const unsigned short*, const char*)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::nextChar(const unsigned short*&, const char*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[3e8]"></a>touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, unicode.o(i._ZN8touchgfx7Unicode4itoaEiPtti))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[3ea]"></a>touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)</STRONG> (Thumb, 72 bytes, Stack size 52 bytes, unicode.o(i._ZN8touchgfx7Unicode4utoaEjPtti))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[3e4]"></a>touchgfx::Unicode::strlen(const unsigned short*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode6strlenEPKt))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, unsigned short, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>

<P><STRONG><a name="[3e9]"></a>touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, unicode.o(i._ZN8touchgfx7Unicode7strncpyEPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)
</UL>

<P><STRONG><a name="[3e7]"></a>touchgfx::Unicode::nextChar(const unsigned short*&, const char*&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode8nextCharERPKtRPKc))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, const char*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
</UL>

<P><STRONG><a name="[3e6]"></a>touchgfx::Unicode::peekChar(const unsigned short*, const char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode8peekCharEPKtPKc))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, const char*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
</UL>

<P><STRONG><a name="[353]"></a>touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, unicode.o(i._ZN8touchgfx7Unicode8snprintfEPttPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
</UL>

<P><STRONG><a name="[3eb]"></a>touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, unicode.o(i._ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
</UL>

<P><STRONG><a name="[3ec]"></a>touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list)</STRONG> (Thumb, 602 bytes, Stack size 192 bytes, unicode.o(i._ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::peekChar(const unsigned short*, const char*)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::nextChar(const unsigned short*&, const char*&)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, const char*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, unsigned short, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[34d]"></a>touchgfx::Drawable::setPosition(short, short, short, short)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, keyboardbase.o(i._ZN8touchgfx8Drawable11setPositionEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Drawable::setPosition(short, short, short, short) &rArr; touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
</UL>

<P><STRONG><a name="[3e1]"></a>touchgfx::Drawable::getCachedAbsX()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx8Drawable13getCachedAbsXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Drawable::getCachedAbsX() &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[3e0]"></a>touchgfx::Drawable::getCachedAbsY()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx8Drawable13getCachedAbsYEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Drawable::getCachedAbsY() &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[41b]"></a>touchgfx::Drawable::setWidthHeight(short, short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, textarea.o(i._ZN8touchgfx8Drawable14setWidthHeightEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
</UL>

<P><STRONG><a name="[1ef]"></a>touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, keyboardbase.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_))
<BR>[Address Reference Count : 9]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[111]"></a>touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 12]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[112]"></a>touchgfx::Drawable::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx8Drawable15handleTickEventEv))
<BR>[Address Reference Count : 12]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[10f]"></a>touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 9]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[110]"></a>touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 12]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[3df]"></a>touchgfx::Drawable::getCachedVisibleRect()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx8Drawable20getCachedVisibleRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Drawable::getCachedVisibleRect() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[10b]"></a>touchgfx::Drawable::setX(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx8Drawable4setXEs))
<BR>[Address Reference Count : 12]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[10c]"></a>touchgfx::Drawable::setY(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx8Drawable4setYEs))
<BR>[Address Reference Count : 12]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[34c]"></a>touchgfx::Drawable::setXY(short, short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, keyboardbase.o(i._ZN8touchgfx8Drawable5setXYEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
</UL>

<P><STRONG><a name="[10d]"></a>touchgfx::Drawable::setWidth(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx8Drawable8setWidthEs))
<BR>[Address Reference Count : 12]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[10e]"></a>touchgfx::Drawable::setHeight(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx8Drawable9setHeightEs))
<BR>[Address Reference Count : 12]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[3e2]"></a>touchgfx::Drawable::Drawable__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, keyboardbase.o(i._ZN8touchgfx8DrawableC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::Container()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
</UL>

<P><STRONG><a name="[3c0]"></a>touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gestures.o(i._ZN8touchgfx8Gestures17registerDragEventEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;short&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[3c1]"></a>touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, gestures.o(i._ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureEventType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::noTouch()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[3bd]"></a>touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)
</UL>

<P><STRONG><a name="[3be]"></a>touchgfx::Gestures::tick()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures4tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
</UL>

<P><STRONG><a name="[3ef]"></a>touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[234]"></a>touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[3f9]"></a>touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 438 bytes, Stack size 88 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[3f8]"></a>touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp14getNativeColorENS_9colortypeE))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[3fa]"></a>touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 404 bytes, Stack size 80 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKjRKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[3f0]"></a>touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 372 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[3f2]"></a>touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 474 bytes, Stack size 96 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[231]"></a>touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)</STRONG> (Thumb, 748 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool) &rArr; touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getExtraData() const
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[3f1]"></a>touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 440 bytes, Stack size 96 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[417]"></a>touchgfx::LCD16bpp::getFramebufferStride()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp20getFramebufferStrideEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[400]"></a>touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&)</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKjRKNS_4RectES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[401]"></a>touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 498 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[402]"></a>touchgfx::LCD16bpp::enableTextureMapperA4()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperA4() &rArr; touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation()
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[3f7]"></a>touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21getNativeColorFromRGBEhhh))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[369]"></a>touchgfx::LCD16bpp::enableTextureMapperAll()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4()
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[409]"></a>touchgfx::LCD16bpp::enableTextureMapperRGB565()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_BilinearInterpolation()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_BilinearInterpolation()
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_NearestNeighbor()
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_NearestNeighbor()
</UL>

<P><STRONG><a name="[405]"></a>touchgfx::LCD16bpp::enableTextureMapperARGB8888()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation()
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[407]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB565() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[408]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[406]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[9e]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[4c7]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[9f]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[4c8]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[404]"></a>touchgfx::LCD16bpp::enableTextureMapperA4_NearestNeighbor()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperA4_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4()
</UL>

<P><STRONG><a name="[a0]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[4c9]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[a1]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[4ca]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[403]"></a>touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4()
</UL>

<P><STRONG><a name="[40f]"></a>touchgfx::LCD16bpp::enableTextureMapperARGB8888_NearestNeighbor()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperARGB8888_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888()
</UL>

<P><STRONG><a name="[411]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_NearestNeighbor()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()
</UL>

<P><STRONG><a name="[413]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_NearestNeighbor()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()
</UL>

<P><STRONG><a name="[aa]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[4cb]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[415]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()
</UL>

<P><STRONG><a name="[ab]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[4cc]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[40b]"></a>touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_NearestNeighbor()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565()
</UL>

<P><STRONG><a name="[a4]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[4cd]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[a6]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[4ce]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[b2]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[4cf]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[40e]"></a>touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888()
</UL>

<P><STRONG><a name="[410]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()
</UL>

<P><STRONG><a name="[412]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()
</UL>

<P><STRONG><a name="[a2]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[4d0]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[a5]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[4d1]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[a7]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[4d2]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[b3]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[4d3]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[40d]"></a>touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_NearestNeighbor()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565()
</UL>

<P><STRONG><a name="[b6]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[4d4]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[414]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()
</UL>

<P><STRONG><a name="[a3]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[4d5]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[a8]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAE)
</UL>
<P><STRONG><a name="[4d6]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[b7]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[4d7]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[40a]"></a>touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565()
</UL>

<P><STRONG><a name="[ae]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[4d8]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[b0]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[4d9]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[b8]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[4da]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[a9]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
</UL>
<P><STRONG><a name="[4db]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[ac]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[4dc]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[af]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[4dd]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[b1]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[4de]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[b9]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[4df]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[40c]"></a>touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_BilinearInterpolation()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565()
</UL>

<P><STRONG><a name="[ad]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[4e0]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[b4]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
</UL>
<P><STRONG><a name="[4e1]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[b5]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
</UL>
<P><STRONG><a name="[4e2]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[232]"></a>touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)</STRONG> (Thumb, 434 bytes, Stack size 80 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[233]"></a>touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[416]"></a>touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation) &rArr; touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[236]"></a>touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)</STRONG> (Thumb, 808 bytes, Stack size 120 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation) &rArr; touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColorFromRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getNativeColor(touchgfx::colortype)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getGreenFromRGB565(unsigned short)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getBlueFromRGB565(unsigned short)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getRedFromRGB565(unsigned short)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::div255(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[419]"></a>touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation) &rArr; touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::getFramebufferStride()
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[427]"></a>touchgfx::LCD16bpp::LCD16bpp()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bppC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[4e3]"></a>touchgfx::LCD16bpp::LCD16bpp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bppC1Ev), UNUSED)

<P><STRONG><a name="[c1]"></a>touchgfx::LCD16bpp::~LCD16bpp()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[4e4]"></a>touchgfx::LCD16bpp::~LCD16bpp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev), UNUSED)

<P><STRONG><a name="[350]"></a>touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, textarea.o(i._ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextArea::setTypedText(const touchgfx::TypedText&) &rArr; touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
</UL>

<P><STRONG><a name="[239]"></a>touchgfx::TextArea::getTextHeight()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, textarea.o(i._ZN8touchgfx8TextArea13getTextHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextArea::getTextHeight() &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[41a]"></a>touchgfx::TextArea::resizeToCurrentText()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, textarea.o(i._ZN8touchgfx8TextArea19resizeToCurrentTextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextArea::resizeToCurrentText() &rArr; touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidthHeight(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(const touchgfx::TypedText&)
</UL>

<P><STRONG><a name="[356]"></a>touchgfx::TextArea::TextArea()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN8touchgfx8TextAreaC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextArea::TextArea() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[4e5]"></a>touchgfx::TextArea::TextArea__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZN8touchgfx8TextAreaC1Ev), UNUSED)

<P><STRONG><a name="[237]"></a>touchgfx::TextArea::~TextArea()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx8TextAreaD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[4e6]"></a>touchgfx::TextArea::~TextArea__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx8TextAreaD1Ev), UNUSED)

<P><STRONG><a name="[3af]"></a>touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, constfont.o(i._ZN8touchgfx9ConstFontC2EPKNS_9GlyphNodeEtthhhhhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
</UL>

<P><STRONG><a name="[108]"></a>touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[113]"></a>touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**) &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[116]"></a>touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</STRONG> (Thumb, 386 bytes, Stack size 152 bytes, container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[114]"></a>touchgfx::Container::add(touchgfx::Drawable&)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::textArea1ClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[115]"></a>touchgfx::Container::remove(touchgfx::Drawable&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::remove(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[347]"></a>touchgfx::Container::Container()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, keyboardbase.o(i._ZN8touchgfx9ContainerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Container::Container() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
</UL>

<P><STRONG><a name="[4e7]"></a>touchgfx::Container::Container__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, keyboardbase.o(i._ZN8touchgfx9ContainerC1Ev), UNUSED)

<P><STRONG><a name="[3a1]"></a>touchgfx::GlyphNode::setTop(short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, textprovider.o(i._ZN8touchgfx9GlyphNode6setTopEs))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
</UL>

<P><STRONG><a name="[34f]"></a>touchgfx::TypedText::TypedText(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx9TypedTextC1Et))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::dxBtClick()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cn_enBtClick()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::initialize()
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::TextAreaWithOneWildcard()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
</UL>

<P><STRONG><a name="[4e8]"></a>touchgfx::TypedText::TypedText__sub_object(unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keyboard.o(i._ZN8touchgfx9TypedTextC1Et), UNUSED)

<P><STRONG><a name="[e6]"></a>TouchGFXHAL::getTFTFrameBuffer() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZNK11TouchGFXHAL17getTFTFrameBufferEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[17b]"></a>HardwareMJPEGDecoder::getCurrentFrameNumber() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaremjpegdecoder.o(i._ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv))
<BR>[Address Reference Count : 1]<UL><LI> hardwaremjpegdecoder.o(.constdata__ZTV20HardwareMJPEGDecoder)
</UL>
<P><STRONG><a name="[3a2]"></a>touchgfx::TextProvider::thaiLookupGlyph(const touchgfx::GlyphNode*, const touchgfx::Font*, unsigned short) const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, textprovider.o(i._ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextProvider::thaiLookupGlyph(const touchgfx::GlyphNode*, const touchgfx::Font*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
</UL>

<P><STRONG><a name="[3ab]"></a>touchgfx::TextProvider::gsubTableBinarySearch(unsigned short, const unsigned short*, unsigned short) const</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, textprovider.o(i._ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::TextProvider::gsubTableBinarySearch(unsigned short, const unsigned short*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::substituteGlyphs()
</UL>

<P><STRONG><a name="[1fe]"></a>touchgfx::GeneratedFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, generatedfont.o(i._ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::GeneratedFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
</UL>
<P><STRONG><a name="[200]"></a>touchgfx::GeneratedFont::getGSUBTable() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, generatedfont.o(i._ZNK8touchgfx13GeneratedFont12getGSUBTableEv))
<BR>[Address Reference Count : 1]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
</UL>
<P><STRONG><a name="[202]"></a>touchgfx::GeneratedFont::getPixelData(const touchgfx::GlyphNode*) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, generatedfont.o(i._ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE))
<BR>[Address Reference Count : 1]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
</UL>
<P><STRONG><a name="[201]"></a>touchgfx::GeneratedFont::getContextualFormsTable() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, generatedfont.o(i._ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv))
<BR>[Address Reference Count : 1]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
</UL>
<P><STRONG><a name="[204]"></a>touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 386 bytes, Stack size 80 bytes, buttonwithlabel.o(i._ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const &rArr; touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...) &rArr; touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::getText(unsigned short) const
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[1f1]"></a>touchgfx::TextAreaWithOneWildcard::getTextWidth() const</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, screen1viewbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::getTextWidth() const &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[1eb]"></a>touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, textareawithwildcard.o(i._ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const &rArr; touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...) &rArr; touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::StringVisuals::StringVisuals(const touchgfx::Font*, touchgfx::colortype, unsigned char, unsigned char, short, touchgfx::TextRotation, unsigned char, unsigned char, touchgfx::WideTextAction)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getAlignment() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[217]"></a>touchgfx::Box::getSolidRect() const</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, box.o(i._ZNK8touchgfx3Box12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::Box::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[216]"></a>touchgfx::Box::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Box::draw(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[421]"></a>touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal.o(i._ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const
</UL>

<P><STRONG><a name="[3b9]"></a>touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, hal.o(i._ZNK8touchgfx3HAL13getDstAddressEttPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations, bool)
</UL>

<P><STRONG><a name="[3c2]"></a>touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, hal.o(i._ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*, unsigned short, touchgfx::Bitmap::BitmapFormat) const &rArr; touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getBitDepth(touchgfx::Bitmap::BitmapFormat) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
</UL>

<P><STRONG><a name="[220]"></a>touchgfx::Font::getKerning(unsigned short, const touchgfx::GlyphNode*) const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, texts.o(i._ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE))
<BR>[Address Reference Count : 1]<UL><LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
</UL>
<P><STRONG><a name="[221]"></a>touchgfx::Font::getGSUBTable() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, texts.o(i._ZNK8touchgfx4Font12getGSUBTableEv))
<BR>[Address Reference Count : 2]<UL><LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1fa]"></a>touchgfx::Font::getFontHeight() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font13getFontHeightEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1f7]"></a>touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, texts.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const &rArr; touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1fc]"></a>touchgfx::Font::getBitsPerPixel() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1fd]"></a>touchgfx::Font::getByteAlignRow() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font15getByteAlignRowEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1f6]"></a>touchgfx::Font::getEllipsisChar() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font15getEllipsisCharEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1f5]"></a>touchgfx::Font::getFallbackChar() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font15getFallbackCharEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1f8]"></a>touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const</STRONG> (Thumb, 106 bytes, Stack size 144 bytes, font.o(i._ZNK8touchgfx4Font15getSpacingAboveEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::top() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1f9]"></a>touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const</STRONG> (Thumb, 120 bytes, Stack size 144 bytes, font.o(i._ZNK8touchgfx4Font16getMaxTextHeightEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::top() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1ff]"></a>touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const</STRONG> (Thumb, 80 bytes, Stack size 136 bytes, font.o(i._ZNK8touchgfx4Font16getNumberOfLinesEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const &rArr; touchgfx::TextProvider::TextProvider() &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[422]"></a>touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const</STRONG> (Thumb, 168 bytes, Stack size 160 bytes, font.o(i._ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[1fb]"></a>touchgfx::Font::getMinimumTextHeight() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cachedfont.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv))
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[222]"></a>touchgfx::Font::getContextualFormsTable() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, texts.o(i._ZNK8touchgfx4Font23getContextualFormsTableEv))
<BR>[Address Reference Count : 2]<UL><LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1f4]"></a>touchgfx::Font::getGlyph(unsigned short) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cachedfont.o(i._ZNK8touchgfx4Font8getGlyphEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Font::getGlyph(unsigned short) const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[385]"></a>touchgfx::Rect::right() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect5rightEv))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
</UL>

<P><STRONG><a name="[386]"></a>touchgfx::Rect::bottom() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect6bottomEv))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, unsigned char, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[381]"></a>touchgfx::Rect::isEmpty() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect7isEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[382]"></a>touchgfx::Rect::includes(const touchgfx::Rect&) const</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, application.o(i._ZNK8touchgfx4Rect8includesERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::includes(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[384]"></a>touchgfx::Rect::intersect(const touchgfx::Rect&) const</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, application.o(i._ZNK8touchgfx4Rect9intersectERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[3db]"></a>touchgfx::Rect::intersect(short, short) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, container.o(i._ZNK8touchgfx4Rect9intersectEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
</UL>

<P><STRONG><a name="[38c]"></a>touchgfx::Rect::operator &(const touchgfx::Rect&) const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZNK8touchgfx4RectanERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[224]"></a>touchgfx::Image::getSolidRect() const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, image.o(i._ZNK8touchgfx5Image12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Image::getSolidRect() const &rArr; touchgfx::Bitmap::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[223]"></a>touchgfx::Image::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, image.o(i._ZNK8touchgfx5Image4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::Image::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[41c]"></a>touchgfx::Texts::getText(unsigned short) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, texts.o(i._ZNK8touchgfx5Texts7getTextEt))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[423]"></a>touchgfx::Bitmap::BitmapData::getFormat() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap10BitmapData9getFormatEv))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getExtraData() const
</UL>

<P><STRONG><a name="[3fc]"></a>touchgfx::Bitmap::getExtraData() const</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap12getExtraDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Bitmap::getExtraData() const
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::BitmapData::getFormat() const
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[3ff]"></a>touchgfx::Bitmap::getSolidRect() const</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Bitmap::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::getSolidRect() const
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::getSolidRect() const
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[3fe]"></a>touchgfx::Bitmap::hasTransparentPixels() const</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap20hasTransparentPixelsEv))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[3fb]"></a>touchgfx::Bitmap::getData() const</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap7getDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getData() const
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[3d3]"></a>touchgfx::Bitmap::getWidth() const</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap8getWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[3fd]"></a>touchgfx::Bitmap::getFormat() const</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap9getFormatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::BitmapData::getFormat() const
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[3d4]"></a>touchgfx::Bitmap::getHeight() const</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap9getHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[205]"></a>touchgfx::Button::getSolidRect() const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, button.o(i._ZNK8touchgfx6Button12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Button::getSolidRect() const &rArr; touchgfx::Bitmap::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[226]"></a>touchgfx::Button::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, button.o(i._ZNK8touchgfx6Button4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Button::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
</UL>
<P><STRONG><a name="[107]"></a>touchgfx::Drawable::invalidate() const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::KeyboardNbEnterBtClickHandler(Keyboard&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::KeyboardEnEnterBtClickHandler(Keyboard&)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::KeyboardCnEnterBtClickHandler(Keyboard&)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::KeyboardEscBtClickHandler(Keyboard&)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::textArea1ClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::dxBtClick()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::blBtClick()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::zBtClick()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::yBtClick()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::xBtClick()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::wBtClick()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::vBtClick()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::uBtClick()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::tBtClick()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::sBtClick()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::rBtClick()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::qBtClick()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pBtClick()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::oBtClick()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::nBtClick()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::mBtClick()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::lBtClick()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::kBtClick()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::jBtClick()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::iBtClick()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::hBtClick()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::gBtClick()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fBtClick()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::eBtClick()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::dBtClick()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cBtClick()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::bBtClick()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::aBtClick()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelectBt5Click()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelectBt4Click()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelectBt3Click()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelectBt2Click()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelectBt1Click()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pySelecUpdata(unsigned char)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::en_delBtClick()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnSelecUpdata(unsigned char)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtBackClick()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::pyClearInput()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fhDelBtClick()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cn_enBtClick()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::cnBtDelClick()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh12BtClick()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh11BtClick()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh10BtClick()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::numBtClick()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::nb9BtClick()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::nb8BtClick()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::nb7BtClick()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::nb6BtClick()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::nb5BtClick()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::nb4BtClick()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::nb3BtClick()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::nb2BtClick()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::nb1BtClick()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::nb0BtClick()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh9BtClick()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh8BtClick()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh7BtClick()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh6BtClick()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh5BtClick()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh4BtClick()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh3BtClick()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh2BtClick()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::fh1BtClick()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::clrBtClick()
</UL>
<BR>[Address Reference Count : 12]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[109]"></a>touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Address Reference Count : 12]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[106]"></a>touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Address Reference Count : 12]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[3da]"></a>touchgfx::Drawable::getAbsoluteRect() const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drawable.o(i._ZNK8touchgfx8Drawable15getAbsoluteRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsY()
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsX()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[10a]"></a>touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE))
<BR>[Address Reference Count : 12]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[235]"></a>touchgfx::LCD16bpp::framebufferFormat() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp17framebufferFormatEv))
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[1ec]"></a>touchgfx::TextArea::getSolidRect() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextArea::getSolidRect() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[23a]"></a>touchgfx::TextArea::getTextWidth() const</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextArea::getTextWidth() const &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[1f2]"></a>touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const</STRONG> (Thumb, 164 bytes, Stack size 152 bytes, textarea.o(i._ZNK8touchgfx8TextArea19calculateTextHeightEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const &rArr; touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> textareawithwildcard.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[238]"></a>touchgfx::TextArea::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, textarea.o(i._ZNK8touchgfx8TextArea4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = touchgfx::TextArea::draw(const touchgfx::Rect&) const &rArr; touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...) &rArr; touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::substituteGlyphs() &rArr; touchgfx::TextProvider::applyGsubRules(const unsigned short*, unsigned short) &rArr; touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*) &rArr; touchgfx::TextProvider::fillInputBuffer() &rArr; touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getAlignment() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[424]"></a>touchgfx::ConstFont::find(unsigned short) const</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, constfont.o(i._ZNK8touchgfx9ConstFont4findEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const
</UL>

<P><STRONG><a name="[1f3]"></a>touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const &rArr; touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[105]"></a>touchgfx::Container::getSolidRect() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, container.o(i._ZNK8touchgfx9Container12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Container::getSolidRect() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[104]"></a>touchgfx::Container::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::Container::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> keyboard.o(.constdata__ZTV8Keyboard)
<LI> keyboardbase.o(.constdata__ZTV12KeyboardBase)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[39f]"></a>touchgfx::GlyphNode::top() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx9GlyphNode3topEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
</UL>

<P><STRONG><a name="[3aa]"></a>touchgfx::GlyphNode::width() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, textprovider.o(i._ZNK8touchgfx9GlyphNode5widthEv))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustArabicGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*, unsigned short)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustHindiGlyph(const touchgfx::GlyphNode*)
</UL>

<P><STRONG><a name="[397]"></a>touchgfx::GlyphNode::advance() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(i._ZNK8touchgfx9GlyphNode7advanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustGlyph(unsigned short, unsigned short, const touchgfx::GlyphNode*&, const touchgfx::Font*)
</UL>

<P><STRONG><a name="[3b7]"></a>touchgfx::TypedText::hasValidId() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZNK8touchgfx9TypedText10hasValidIdEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextHeight()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeight()
</UL>

<P><STRONG><a name="[3b0]"></a>touchgfx::TypedText::assertValid() const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, keyboard.o(i._ZNK8touchgfx9TypedText11assertValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getAlignment() const
</UL>

<P><STRONG><a name="[41f]"></a>touchgfx::TypedText::getAlignment() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, textarea.o(i._ZNK8touchgfx9TypedText12getAlignmentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TypedText::getAlignment() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[41e]"></a>touchgfx::TypedText::getTextDirection() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, textarea.o(i._ZNK8touchgfx9TypedText16getTextDirectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TypedText::getTextDirection() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
</UL>

<P><STRONG><a name="[41d]"></a>touchgfx::TypedText::getFont() const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, screen1viewbase.o(i._ZNK8touchgfx9TypedText7getFontEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TypedText::getFont() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
</UL>

<P><STRONG><a name="[352]"></a>touchgfx::TypedText::getText() const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboardbase.o(i._ZNK8touchgfx9TypedText7getTextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::getText(unsigned short) const
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardBase::KeyboardBase()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextHeight()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeight()
</UL>

<P><STRONG><a name="[373]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::STM32DMA()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
</UL>

<P><STRONG><a name="[321]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_28_4bpp()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_40_4bpp()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_30_4bpp()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_28_4bpp()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_32_4bpp()
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_BilinearInterpolation()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_BilinearInterpolation()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_BilinearInterpolation()
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_NonOpaque_NearestNeighbor()
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_BilinearInterpolation()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_BilinearInterpolation()
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_BilinearInterpolation()
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565_Opaque_NearestNeighbor()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888_NearestNeighbor()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888_NearestNeighbor()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565_NearestNeighbor()
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888_NearestNeighbor()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_BilinearInterpolation()
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4_NearestNeighbor()
</UL>

<P><STRONG><a name="[20a]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 6]<UL><LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
<LI> keyboardbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[4e9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4ea]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4eb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[257]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[9]"></a>ft6x06_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ft6x06.o(i.ft6x06_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft6x06_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_GetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ft6x06_ReadID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ft6x06.o(i.ft6x06_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ft6x06_ReadID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ft6x06_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_Reset))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>ft6x06_TS_ClearIT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_ClearIT))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>ft6x06_TS_DetectTouch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_TS_DetectTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ft6x06_TS_DetectTouch &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>ft6x06_TS_DisableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ft6x06_TS_DisableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>ft6x06_TS_EnableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ft6x06_TS_EnableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>ft6x06_TS_GetXY</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ft6x06.o(i.ft6x06_TS_GetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ft6x06_TS_GetXY &rArr; TS_IO_ReadMultiple &rArr; I2Cx_ReadMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>ft6x06_TS_ITStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_ITStatus))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ft6x06_TS_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ft6x06_TS_Start &rArr; ft6x06_TS_DisableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DisableIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>main</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2188<LI>Call Chain = main &rArr; HAL_JPEG_Init &rArr; JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LIBJPEG_Init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DSIHOST_DSI_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[255]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[313]"></a>osDelay</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[42b]"></a>osKernelInitialize</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42d]"></a>osKernelStart</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37a]"></a>osMessageQueueGet</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
</UL>

<P><STRONG><a name="[378]"></a>osMessageQueueNew</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageQueueNew &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>

<P><STRONG><a name="[379]"></a>osMessageQueuePut</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
</UL>

<P><STRONG><a name="[437]"></a>osMutexAcquire</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry()
</UL>

<P><STRONG><a name="[426]"></a>osMutexNew</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cmsis_os2.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
</UL>

<P><STRONG><a name="[365]"></a>osMutexRelease</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cmsis_os2.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::endFrame()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry()
</UL>

<P><STRONG><a name="[37d]"></a>osSemaphoreAcquire</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry()
</UL>

<P><STRONG><a name="[377]"></a>osSemaphoreNew</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>

<P><STRONG><a name="[364]"></a>osSemaphoreRelease</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cmsis_os2.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::endFrame()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>

<P><STRONG><a name="[42c]"></a>osThreadNew</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[466]"></a>pvPortMalloc</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[47f]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[457]"></a>pxPortInitialiseStack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[310]"></a>touchgfx_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i.touchgfx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx_init &rArr; TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreNew &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstanceSize()
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstance()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_Init
</UL>

<P><STRONG><a name="[31e]"></a>touchgfx_taskEntry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i.touchgfx_taskEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = touchgfx_taskEntry &rArr; TouchGFXHAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::taskEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFX_Task
</UL>

<P><STRONG><a name="[444]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[473]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[482]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationGetTimerTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[451]"></a>vApplicationIdleHook</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.vApplicationIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vApplicationIdleHook &rArr; vTaskSetApplicationTaskTag
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[449]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[456]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[446]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[445]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[448]"></a>vPortEnterCritical</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[44a]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[450]"></a>vPortFree</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[478]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[46d]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[434]"></a>vQueueAddToRegistry</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[43e]"></a>vQueueDelete</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[46f]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[460]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[42e]"></a>vTaskDelay</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[47c]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[465]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[471]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[470]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[472]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[46c]"></a>vTaskSetApplicationTaskTag</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskSetApplicationTaskTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSetApplicationTaskTag
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[42f]"></a>vTaskStartScheduler</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCallApplicationTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[45e]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[24d]"></a>vTaskSwitchContext</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCallApplicationTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[c6]"></a>videoTaskFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i.videoTaskFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = videoTaskFunc &rArr; DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry() &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[476]"></a>xPortStartScheduler</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[43f]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[43d]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphoreStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[43b]"></a>xQueueCreateMutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[43a]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[433]"></a>xQueueGenericCreate</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[432]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
</UL>

<P><STRONG><a name="[454]"></a>xQueueGenericReset</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[435]"></a>xQueueGenericSend</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[436]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[440]"></a>xQueueGiveFromISR</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[43c]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[430]"></a>xQueueReceive</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[431]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[439]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[438]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[475]"></a>xTaskCallApplicationTaskHook</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.xTaskCallApplicationTaskHook))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[47d]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[442]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[441]"></a>xTaskCreateStatic</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[47e]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[47b]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[461]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[314]"></a>xTaskIncrementTick</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[44e]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[480]"></a>xTaskPriorityInherit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[464]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[45f]"></a>xTaskResumeAll</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[474]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[45c]"></a>xTimerGenericCommand</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[477]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry()</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj480ELj288ELj960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::decoderTaskEntry() &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoTaskFunc
</UL>

<P><STRONG><a name="[bd]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::Stream::Stream()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj480ELj288ELj960ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb)
</UL>
<P><STRONG><a name="[4ec]"></a>DedicatedBufferController&lang;(unsigned)1, (unsigned)480, (unsigned)288, (unsigned)960, (touchgfx::Bitmap::BitmapFormat)0&rang;::Stream::Stream__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(t._ZN25DedicatedBufferControllerILj1ELj480ELj288ELj960ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev), UNUSED)

<P><STRONG><a name="[39b]"></a>touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, textprovider.o(t._ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::gsubRuleMatch(const unsigned short*, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[39e]"></a>touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, texts.o(t._ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::peekChar()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::substituteGlyphs()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char, const touchgfx::Font*, const touchgfx::GlyphNode*&, const unsigned char*&, unsigned char&)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::adjustThaiGlyph(const touchgfx::Font*, const touchgfx::GlyphNode*)
</UL>

<P><STRONG><a name="[3a3]"></a>touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, textprovider.o(t._ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::pushBack(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
</UL>

<P><STRONG><a name="[3ac]"></a>touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::dropFront(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, textprovider.o(t._ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::dropFront(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::replaceInputCharacters(unsigned short, unsigned short, const unsigned short*)
</UL>

<P><STRONG><a name="[1ee]"></a>touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, screen1viewbase.o(t._ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEE16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
</UL>
<P><STRONG><a name="[366]"></a>T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Keyboard::Keyboard() &rArr; KeyboardBase::KeyboardBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, const char*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1Presenter::Screen1Presenter(Screen1View&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::bindTransition(touchgfx::Transition&)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::clearAllTimerWidgets()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[3ed]"></a>T1 touchgfx::abs&lang;short&rang;(T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gestures.o(t._ZN8touchgfx3absIsEET_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[383]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[387]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EE3addES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[38a]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[4ed]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev), UNUSED)

<P><STRONG><a name="[229]"></a>touchgfx::Callback&lang;Screen1View, Keyboard&, void, void&rang;::execute(Keyboard&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewR8KeyboardvvE7executeES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Callback&lang;Screen1View, Keyboard&, void, void&rang;::execute(Keyboard&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewR8KeyboardvvEE)
</UL>
<P><STRONG><a name="[332]"></a>touchgfx::Callback&lang;Screen1View, Keyboard&, void, void&rang;::Callback(Screen1View*, void(Screen1View::*)(Keyboard&))</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewR8KeyboardvvEC1EPS1_MS1_FvS3_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Callback&lang;Screen1View, Keyboard&, void, void&rang;::Callback(Screen1View*, void(Screen1View::*)(Keyboard&))
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
</UL>

<P><STRONG><a name="[4ee]"></a>touchgfx::Callback&lang;Screen1View, Keyboard&, void, void&rang;::Callback__sub_object(Screen1View*, void(Screen1View::*)(Keyboard&))</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewR8KeyboardvvEC1EPS1_MS1_FvS3_E), UNUSED)

<P><STRONG><a name="[22b]"></a>touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::execute(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvE7executeES4_S7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::execute(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
</UL>
<P><STRONG><a name="[22d]"></a>touchgfx::Callback&lang;KeyboardBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, keyboardbase.o(t._ZN8touchgfx8CallbackI12KeyboardBaseRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Callback&lang;KeyboardBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTVN8touchgfx8CallbackI12KeyboardBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[22f]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL>
<P><STRONG><a name="[23b]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[23c]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[23d]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[23e]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen1Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[23f]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[240]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[3a4]"></a>touchgfx::TextProvider::circularBuffer&lang;(unsigned)10&rang;::isFull() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, textprovider.o(t._ZNK8touchgfx12TextProvider14circularBufferILj10EE6isFullEv))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::fillInputBuffer()
</UL>

<P><STRONG><a name="[22a]"></a>touchgfx::Callback&lang;Screen1View, Keyboard&, void, void&rang;::isValid() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewR8KeyboardvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewR8KeyboardvvEE)
</UL>
<P><STRONG><a name="[22c]"></a>touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::isValid() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
</UL>
<P><STRONG><a name="[22e]"></a>touchgfx::Callback&lang;KeyboardBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, keyboardbase.o(t._ZNK8touchgfx8CallbackI12KeyboardBaseRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> keyboardbase.o(.constdata__ZTVN8touchgfx8CallbackI12KeyboardBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[230]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[336]"></a>__NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, touchgfxhal.o(i._Z16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::enableInterrupts()
</UL>

<P><STRONG><a name="[339]"></a>__NVIC_DisableIRQ(IRQn_Type)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, touchgfxhal.o(i._Z17__NVIC_DisableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::disableInterrupts()
</UL>

<P><STRONG><a name="[241]"></a>__sti___15_TouchGFXHAL_cpp_c3b64dc6</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, touchgfxhal.o(i.__sti___15_TouchGFXHAL_cpp_c3b64dc6))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __sti___15_TouchGFXHAL_cpp_c3b64dc6 &rArr; touchgfx::KeySampler::init() &rArr; touchgfx::Buttons::init() &rArr; BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::KeySampler::init()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.init_array)
</UL>
<P><STRONG><a name="[31f]"></a>I2Cx_Error(__I2C_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32touchcontroller.o(i._Z10I2Cx_ErrorP19__I2C_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[31a]"></a>I2Cx_ReadMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, stm32touchcontroller.o(i._Z17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = I2Cx_ReadMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error(__I2C_HandleTypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>

<P><STRONG><a name="[31d]"></a>I2Cx_WriteMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, stm32touchcontroller.o(i._Z18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = I2Cx_WriteMultiple(__I2C_HandleTypeDef*, unsigned char, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; I2Cx_Error(__I2C_HandleTypeDef*, unsigned char) &rArr; MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error(__I2C_HandleTypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>

<P><STRONG><a name="[242]"></a>__sti___25_TouchGFXConfiguration_cpp_f5abfd34</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __sti___25_TouchGFXConfiguration_cpp_f5abfd34 &rArr; TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short) &rArr; touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::LCD16bpp()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32DMA::STM32DMA()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.init_array)
</UL>
<P><STRONG><a name="[362]"></a>SCB_CleanInvalidateDCache()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, touchgfxgeneratedhal.o(i._Z25SCB_CleanInvalidateDCachev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCB_CleanInvalidateDCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::InvalidateCache()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::FlushCache()
</UL>

<P><STRONG><a name="[243]"></a>__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i.__sti___24_TouchGFXGeneratedHAL_cpp_db822bdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sti___24_TouchGFXGeneratedHAL_cpp_db822bdb &rArr; osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareMJPEGDecoder::HardwareMJPEGDecoder()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxgeneratedhal.o(.init_array)
</UL>
<P><STRONG><a name="[9c]"></a>DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(i._ZN8STM32DMA10initializeEv)
</UL>
<P><STRONG><a name="[99]"></a>JPEG_MCU_Gray_ARGB_ConvertBlocks</STRONG> (Thumb, 126 bytes, Stack size 52 bytes, tgfx_jpeg_utils.o(i.JPEG_MCU_Gray_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = JPEG_MCU_Gray_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[9a]"></a>JPEG_MCU_YCCK_ARGB_ConvertBlocks</STRONG> (Thumb, 174 bytes, Stack size 60 bytes, tgfx_jpeg_utils.o(i.JPEG_MCU_YCCK_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = JPEG_MCU_YCCK_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[98]"></a>JPEG_MCU_YCbCr422_ARGB_ConvertBlocks</STRONG> (Thumb, 330 bytes, Stack size 80 bytes, tgfx_jpeg_utils.o(i.JPEG_MCU_YCbCr422_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = JPEG_MCU_YCbCr422_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[96]"></a>JPEG_MCU_YCbCr444_ARGB_ConvertBlocks</STRONG> (Thumb, 236 bytes, Stack size 68 bytes, tgfx_jpeg_utils.o(i.JPEG_MCU_YCbCr444_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = JPEG_MCU_YCbCr444_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[317]"></a>TGFX_JPEG_InitPreProcColorTables</STRONG> (Thumb, 176 bytes, Stack size 36 bytes, tgfx_jpeg_utils.o(i.TGFX_JPEG_InitPreProcColorTables))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TGFX_JPEG_InitPreProcColorTables
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_InitColorTables
</UL>

<P><STRONG><a name="[318]"></a>TGFX_JPEG_Init_MCU_LUT</STRONG> (Thumb, 224 bytes, Stack size 36 bytes, tgfx_jpeg_utils.o(i.TGFX_JPEG_Init_MCU_LUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TGFX_JPEG_Init_MCU_LUT
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGFX_JPEG_InitColorTables
</UL>

<P><STRONG><a name="[97]"></a>TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks</STRONG> (Thumb, 476 bytes, Stack size 80 bytes, tgfx_jpeg_utils.o(i.TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tgfx_jpeg_utils.o(i.TGFX_JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[25f]"></a>BSP_SDRAM_Initialization_Sequence</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, main.o(i.BSP_SDRAM_Initialization_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_SDRAM_Initialization_Sequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
</UL>

<P><STRONG><a name="[2f0]"></a>MPU_Config</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, main.o(i.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MPU_Config &rArr; HAL_MPU_ConfigRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f4]"></a>MX_DMA2D_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.MX_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_DMA2D_Init &rArr; HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f6]"></a>MX_DSIHOST_DSI_Init</STRONG> (Thumb, 300 bytes, Stack size 192 bytes, main.o(i.MX_DSIHOST_DSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MX_DSIHOST_DSI_Init &rArr; HAL_DSI_Init &rArr; HAL_DSI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_SetLowPowerRXFilter
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_SetGenericVCID
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigPhyTimer
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigHostTimeouts
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigFlowControl
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigErrorMonitor
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigCommand
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigAdaptedCommandMode
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[300]"></a>MX_FMC_Init</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, main.o(i.MX_FMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_FMC_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_Sequence
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[301]"></a>MX_GPIO_Init</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[305]"></a>MX_LTDC_Init</STRONG> (Thumb, 236 bytes, Stack size 128 bytes, main.o(i.MX_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MX_LTDC_Init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetPitch
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigCommand
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[309]"></a>MX_QUADSPI_Init</STRONG> (Thumb, 122 bytes, Stack size 88 bytes, main.o(i.MX_QUADSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = MX_QUADSPI_Init &rArr; QSPI_EnterFourBytesAddress &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterMemory_QPI
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30d]"></a>QSPI_DummyCyclesCfg</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, main.o(i.QSPI_DummyCyclesCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = QSPI_DummyCyclesCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[30c]"></a>QSPI_EnterFourBytesAddress</STRONG> (Thumb, 118 bytes, Stack size 168 bytes, main.o(i.QSPI_EnterFourBytesAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = QSPI_EnterFourBytesAddress &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[30b]"></a>QSPI_EnterMemory_QPI</STRONG> (Thumb, 116 bytes, Stack size 112 bytes, main.o(i.QSPI_EnterMemory_QPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = QSPI_EnterMemory_QPI &rArr; HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[30e]"></a>QSPI_OutDrvStrengthCfg</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, main.o(i.QSPI_OutDrvStrengthCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = QSPI_OutDrvStrengthCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[30a]"></a>QSPI_ResetMemory</STRONG> (Thumb, 382 bytes, Stack size 128 bytes, main.o(i.QSPI_ResetMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = QSPI_ResetMemory &rArr; HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[312]"></a>QSPI_WriteEnable</STRONG> (Thumb, 102 bytes, Stack size 104 bytes, main.o(i.QSPI_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[284]"></a>HAL_FMC_MspInit</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, stm32f7xx_hal_msp.o(i.HAL_FMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>

<P><STRONG><a name="[428]"></a>ft6x06_GetInstance</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_Init
</UL>

<P><STRONG><a name="[2bc]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[274]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[273]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[276]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2de]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[2dd]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[28b]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[28f]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[28c]"></a>I2C_TransferConfig</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[28a]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[28d]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[290]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[27f]"></a>DSI_ConfigPacketHeader</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f7xx_hal_dsi.o(i.DSI_ConfigPacketHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSI_ConfigPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>

<P><STRONG><a name="[269]"></a>DSI_ShortWrite</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, stm32f7xx_hal_dsi.o(i.DSI_ShortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
</UL>

<P><STRONG><a name="[2e0]"></a>JPEG_ACHuff_BitsVals_To_SizeCodes</STRONG> (Thumb, 112 bytes, Stack size 1304 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_ACHuff_BitsVals_To_SizeCodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Bits_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffAC_Mem
</UL>

<P><STRONG><a name="[2e1]"></a>JPEG_Bits_To_SizeCodes</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Bits_To_SizeCodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JPEG_Bits_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffDC_Mem
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ACHuff_BitsVals_To_SizeCodes
</UL>

<P><STRONG><a name="[8d]"></a>JPEG_DMAErrorCallback</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMAErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JPEG_DMAErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[8e]"></a>JPEG_DMAInCpltCallback</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMAInCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = JPEG_DMAInCpltCallback &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[90]"></a>JPEG_DMAOutAbortCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMAOutAbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JPEG_DMAOutAbortCallback &rArr; JPEG_DMA_EndProcess &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[8f]"></a>JPEG_DMAOutCpltCallback</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMAOutCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = JPEG_DMAOutCpltCallback &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_ErrorCallback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess)
</UL>
<P><STRONG><a name="[2a9]"></a>JPEG_DMA_ContinueProcess</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMA_ContinueProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = JPEG_DMA_ContinueProcess &rArr; JPEG_DMA_EndProcess &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetInfo
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_EndProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>

<P><STRONG><a name="[2e3]"></a>JPEG_DMA_EndProcess</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMA_EndProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JPEG_DMA_EndProcess &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMA_ContinueProcess
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_DMAOutAbortCallback
</UL>

<P><STRONG><a name="[2b2]"></a>JPEG_DMA_PollResidualData</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMA_PollResidualData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = JPEG_DMA_PollResidualData &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Resume
</UL>

<P><STRONG><a name="[2a2]"></a>JPEG_DMA_StartProcess</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_DMA_StartProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = JPEG_DMA_StartProcess &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Decode_DMA
</UL>

<P><STRONG><a name="[2a1]"></a>JPEG_Init_Process</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Init_Process))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Decode_DMA
</UL>

<P><STRONG><a name="[2aa]"></a>JPEG_Process</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = JPEG_Process &rArr; JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_InfoReadyCallback
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DecodeCpltCallback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_EncodeCpltCallback
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetInfo
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_StoreOutputData
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_IRQHandler
</UL>

<P><STRONG><a name="[2ea]"></a>JPEG_ReadInputData</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_ReadInputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = JPEG_ReadInputData &rArr; HAL_JPEG_GetDataCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Pause
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_GetDataCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
</UL>

<P><STRONG><a name="[2ec]"></a>JPEG_Set_HuffAC_Mem</STRONG> (Thumb, 148 bytes, Stack size 832 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Set_HuffAC_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 2156<LI>Call Chain = JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_ACHuff_BitsVals_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>

<P><STRONG><a name="[2ed]"></a>JPEG_Set_HuffDC_Mem</STRONG> (Thumb, 184 bytes, Stack size 1376 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Set_HuffDC_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 1396<LI>Call Chain = JPEG_Set_HuffDC_Mem &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Bits_To_SizeCodes
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>

<P><STRONG><a name="[2b0]"></a>JPEG_Set_HuffEnc_Mem</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Set_HuffEnc_Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 2164<LI>Call Chain = JPEG_Set_HuffEnc_Mem &rArr; JPEG_Set_HuffAC_Mem &rArr; JPEG_ACHuff_BitsVals_To_SizeCodes &rArr; JPEG_Bits_To_SizeCodes
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_Huff_DHTMem
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffDC_Mem
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffAC_Mem
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_Init
</UL>

<P><STRONG><a name="[2ee]"></a>JPEG_Set_Huff_DHTMem</STRONG> (Thumb, 582 bytes, Stack size 28 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_Set_Huff_DHTMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = JPEG_Set_Huff_DHTMem
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Set_HuffEnc_Mem
</UL>

<P><STRONG><a name="[2eb]"></a>JPEG_StoreOutputData</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, stm32f7xx_hal_jpeg.o(i.JPEG_StoreOutputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = JPEG_StoreOutputData &rArr; HAL_JPEG_DataReadyCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_JPEG_DataReadyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Process
</UL>

<P><STRONG><a name="[2b5]"></a>LTDC_SetConfig</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, stm32f7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[2c0]"></a>QSPI_Config</STRONG> (Thumb, 424 bytes, Stack size 28 bytes, stm32f7xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>

<P><STRONG><a name="[2bf]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>

<P><STRONG><a name="[44c]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[44d]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[452]"></a>prvInitialiseMutex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[453]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[459]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[463]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[443]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[447]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[44f]"></a>prvDeleteTCB</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[ca]"></a>prvIdleTask</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[455]"></a>prvInitialiseNewTask</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[481]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[44b]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[458]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[45a]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[45d]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[45b]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[462]"></a>prvSwitchTimerLists</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[cb]"></a>prvTimerTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[467]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[468]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[c7]"></a>prvTaskExitError</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[94]"></a>JPEG_MCU_Gray_ARGB_ConvertBlocks</STRONG> (Thumb, 126 bytes, Stack size 52 bytes, jpeg_utils.o(i.JPEG_MCU_Gray_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = JPEG_MCU_Gray_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[95]"></a>JPEG_MCU_YCCK_ARGB_ConvertBlocks</STRONG> (Thumb, 174 bytes, Stack size 60 bytes, jpeg_utils.o(i.JPEG_MCU_YCCK_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = JPEG_MCU_YCCK_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[92]"></a>JPEG_MCU_YCbCr420_ARGB_ConvertBlocks</STRONG> (Thumb, 468 bytes, Stack size 80 bytes, jpeg_utils.o(i.JPEG_MCU_YCbCr420_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[93]"></a>JPEG_MCU_YCbCr422_ARGB_ConvertBlocks</STRONG> (Thumb, 330 bytes, Stack size 80 bytes, jpeg_utils.o(i.JPEG_MCU_YCbCr422_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = JPEG_MCU_YCbCr422_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[91]"></a>JPEG_MCU_YCbCr444_ARGB_ConvertBlocks</STRONG> (Thumb, 236 bytes, Stack size 68 bytes, jpeg_utils.o(i.JPEG_MCU_YCbCr444_ARGB_ConvertBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = JPEG_MCU_YCbCr444_ARGB_ConvertBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg_utils.o(i.JPEG_GetDecodeColorConvertFunc)
</UL>
<P><STRONG><a name="[244]"></a>__sti___21_typedtextdatabase_cpp_05ec7672</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_05ec7672))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __sti___21_typedtextdatabase_cpp_05ec7672 &rArr; getFont_verdana_40_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_28_4bpp()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_40_4bpp()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_30_4bpp()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_Bold_28_4bpp()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_MicrosoftYaHei_32_4bpp()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typedtextdatabase.o(.init_array)
</UL>
<P><STRONG><a name="[245]"></a>__sti___15_Application_cpp_63cd8d44</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, application.o(i.__sti___15_Application_cpp_63cd8d44))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___15_Application_cpp_63cd8d44 &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.init_array)
</UL>
<P><STRONG><a name="[246]"></a>__sti___7_LCD_cpp_86507772</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.__sti___7_LCD_cpp_86507772))
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
